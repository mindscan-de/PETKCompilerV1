/*
 * generated by Xtext 2.27.0
 */
package de.mindscan.ai.aidsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import de.mindscan.ai.aidsl.ide.contentassist.antlr.internal.InternalAiDslParser;
import de.mindscan.ai.aidsl.services.AiDslGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class AiDslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(AiDslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, AiDslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getModelAccess().getDefinitionsAlternatives_2_0(), "rule__Model__DefinitionsAlternatives_2_0");
			builder.put(grammarAccess.getVMNodeDefinitionAccess().getNodetypeAlternatives_1_0(), "rule__VMNodeDefinition__NodetypeAlternatives_1_0");
			builder.put(grammarAccess.getVMNodeEleemntsAccess().getAlternatives(), "rule__VMNodeEleemnts__Alternatives");
			builder.put(grammarAccess.getVMNodeFieldElementsAccess().getFieldELementsAlternatives_3_0(), "rule__VMNodeFieldElements__FieldELementsAlternatives_3_0");
			builder.put(grammarAccess.getVMNodeInElementAccess().getPolicyAlternatives_0_0(), "rule__VMNodeInElement__PolicyAlternatives_0_0");
			builder.put(grammarAccess.getVMFieldElementAccess().getPolicyAlternatives_0_0(), "rule__VMFieldElement__PolicyAlternatives_0_0");
			builder.put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
			builder.put(grammarAccess.getPackageDeclarationAccess().getGroup(), "rule__PackageDeclaration__Group__0");
			builder.put(grammarAccess.getImportDeclarationAccess().getGroup(), "rule__ImportDeclaration__Group__0");
			builder.put(grammarAccess.getVMNodeDefinitionAccess().getGroup(), "rule__VMNodeDefinition__Group__0");
			builder.put(grammarAccess.getVMNodeOpCodeElementAccess().getGroup(), "rule__VMNodeOpCodeElement__Group__0");
			builder.put(grammarAccess.getVMNodeOutElementsAccess().getGroup(), "rule__VMNodeOutElements__Group__0");
			builder.put(grammarAccess.getVMNodeInElementsAccess().getGroup(), "rule__VMNodeInElements__Group__0");
			builder.put(grammarAccess.getVMNodeFieldElementsAccess().getGroup(), "rule__VMNodeFieldElements__Group__0");
			builder.put(grammarAccess.getVMNodeOutElementAccess().getGroup(), "rule__VMNodeOutElement__Group__0");
			builder.put(grammarAccess.getVMNodeOutElementAccess().getGroup_3(), "rule__VMNodeOutElement__Group_3__0");
			builder.put(grammarAccess.getVMNodeInElementAccess().getGroup(), "rule__VMNodeInElement__Group__0");
			builder.put(grammarAccess.getVMFieldElementAccess().getGroup(), "rule__VMFieldElement__Group__0");
			builder.put(grammarAccess.getVMFieldElementAccess().getGroup_3(), "rule__VMFieldElement__Group_3__0");
			builder.put(grammarAccess.getVMOverrideFieldElementAccess().getGroup(), "rule__VMOverrideFieldElement__Group__0");
			builder.put(grammarAccess.getLlmTaskDefinitionAccess().getGroup(), "rule__LlmTaskDefinition__Group__0");
			builder.put(grammarAccess.getLlmTaskDefinitionAccess().getGroup_4(), "rule__LlmTaskDefinition__Group_4__0");
			builder.put(grammarAccess.getLlmTaskDefinitionAccess().getGroup_4_2(), "rule__LlmTaskDefinition__Group_4_2__0");
			builder.put(grammarAccess.getAnnotationInterfaceReferenceAccess().getGroup(), "rule__AnnotationInterfaceReference__Group__0");
			builder.put(grammarAccess.getLlmVariableAssignmentAccess().getGroup(), "rule__LlmVariableAssignment__Group__0");
			builder.put(grammarAccess.getWorkflowDefinitionAccess().getGroup(), "rule__WorkflowDefinition__Group__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
			builder.put(grammarAccess.getQualifiedNameWithWildcardAccess().getGroup(), "rule__QualifiedNameWithWildcard__Group__0");
			builder.put(grammarAccess.getModelAccess().getPackage_declarationAssignment_0(), "rule__Model__Package_declarationAssignment_0");
			builder.put(grammarAccess.getModelAccess().getImport_declarationsAssignment_1(), "rule__Model__Import_declarationsAssignment_1");
			builder.put(grammarAccess.getModelAccess().getDefinitionsAssignment_2(), "rule__Model__DefinitionsAssignment_2");
			builder.put(grammarAccess.getPackageDeclarationAccess().getNameAssignment_1(), "rule__PackageDeclaration__NameAssignment_1");
			builder.put(grammarAccess.getImportDeclarationAccess().getImportedNamespaceAssignment_1(), "rule__ImportDeclaration__ImportedNamespaceAssignment_1");
			builder.put(grammarAccess.getVMNodeDefinitionAccess().getNodetypeAssignment_1(), "rule__VMNodeDefinition__NodetypeAssignment_1");
			builder.put(grammarAccess.getVMNodeDefinitionAccess().getNameAssignment_2(), "rule__VMNodeDefinition__NameAssignment_2");
			builder.put(grammarAccess.getVMNodeDefinitionAccess().getElementsAssignment_4(), "rule__VMNodeDefinition__ElementsAssignment_4");
			builder.put(grammarAccess.getVMNodeOpCodeElementAccess().getOpcodeAssignment_1(), "rule__VMNodeOpCodeElement__OpcodeAssignment_1");
			builder.put(grammarAccess.getVMNodeOutElementsAccess().getOutElementsAssignment_3(), "rule__VMNodeOutElements__OutElementsAssignment_3");
			builder.put(grammarAccess.getVMNodeInElementsAccess().getInElementsAssignment_3(), "rule__VMNodeInElements__InElementsAssignment_3");
			builder.put(grammarAccess.getVMNodeFieldElementsAccess().getFieldELementsAssignment_3(), "rule__VMNodeFieldElements__FieldELementsAssignment_3");
			builder.put(grammarAccess.getVMNodeOutElementAccess().getNameAssignment_0(), "rule__VMNodeOutElement__NameAssignment_0");
			builder.put(grammarAccess.getVMNodeOutElementAccess().getTypeAssignment_2(), "rule__VMNodeOutElement__TypeAssignment_2");
			builder.put(grammarAccess.getVMNodeOutElementAccess().getHasrequireAssignment_3_0(), "rule__VMNodeOutElement__HasrequireAssignment_3_0");
			builder.put(grammarAccess.getVMNodeOutElementAccess().getInputreferenceAssignment_3_1(), "rule__VMNodeOutElement__InputreferenceAssignment_3_1");
			builder.put(grammarAccess.getVMNodeInElementAccess().getPolicyAssignment_0(), "rule__VMNodeInElement__PolicyAssignment_0");
			builder.put(grammarAccess.getVMNodeInElementAccess().getNameAssignment_1(), "rule__VMNodeInElement__NameAssignment_1");
			builder.put(grammarAccess.getVMFieldElementAccess().getPolicyAssignment_0(), "rule__VMFieldElement__PolicyAssignment_0");
			builder.put(grammarAccess.getVMFieldElementAccess().getTypeAssignment_1(), "rule__VMFieldElement__TypeAssignment_1");
			builder.put(grammarAccess.getVMFieldElementAccess().getNameAssignment_2(), "rule__VMFieldElement__NameAssignment_2");
			builder.put(grammarAccess.getVMFieldElementAccess().getDefaultvalueAssignment_3_1(), "rule__VMFieldElement__DefaultvalueAssignment_3_1");
			builder.put(grammarAccess.getVMOverrideFieldElementAccess().getPolicyAssignment_0(), "rule__VMOverrideFieldElement__PolicyAssignment_0");
			builder.put(grammarAccess.getVMOverrideFieldElementAccess().getTypeAssignment_1(), "rule__VMOverrideFieldElement__TypeAssignment_1");
			builder.put(grammarAccess.getVMOverrideFieldElementAccess().getNameAssignment_2(), "rule__VMOverrideFieldElement__NameAssignment_2");
			builder.put(grammarAccess.getVMOverrideFieldElementAccess().getDefaultvalueAssignment_4(), "rule__VMOverrideFieldElement__DefaultvalueAssignment_4");
			builder.put(grammarAccess.getLlmTaskDefinitionAccess().getNameAssignment_1(), "rule__LlmTaskDefinition__NameAssignment_1");
			builder.put(grammarAccess.getLlmTaskDefinitionAccess().getAnnotation_interfacesAssignment_4_1(), "rule__LlmTaskDefinition__Annotation_interfacesAssignment_4_1");
			builder.put(grammarAccess.getLlmTaskDefinitionAccess().getAnnotation_interfacesAssignment_4_2_1(), "rule__LlmTaskDefinition__Annotation_interfacesAssignment_4_2_1");
			builder.put(grammarAccess.getLlmTaskDefinitionAccess().getAssignmentAssignment_6(), "rule__LlmTaskDefinition__AssignmentAssignment_6");
			builder.put(grammarAccess.getAnnotationInterfaceReferenceAccess().getNameAssignment_1(), "rule__AnnotationInterfaceReference__NameAssignment_1");
			builder.put(grammarAccess.getLlmVariableAssignmentAccess().getVariablenameAssignment_0(), "rule__LlmVariableAssignment__VariablenameAssignment_0");
			builder.put(grammarAccess.getLlmVariableAssignmentAccess().getTemplateAssignment_2(), "rule__LlmVariableAssignment__TemplateAssignment_2");
			builder.put(grammarAccess.getWorkflowDefinitionAccess().getNameAssignment_1(), "rule__WorkflowDefinition__NameAssignment_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private AiDslGrammarAccess grammarAccess;

	@Override
	protected InternalAiDslParser createParser() {
		InternalAiDslParser result = new InternalAiDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public AiDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(AiDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
