/**
 * generated by Xtext 2.27.0
 */
package de.mindscan.ai.aidsl.aiDsl.impl;

import de.mindscan.ai.aidsl.aiDsl.AiDslPackage;
import de.mindscan.ai.aidsl.aiDsl.Model;
import de.mindscan.ai.aidsl.aiDsl.PackageDeclaration;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Model</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.mindscan.ai.aidsl.aiDsl.impl.ModelImpl#getPackagedeclaration <em>Packagedeclaration</em>}</li>
 *   <li>{@link de.mindscan.ai.aidsl.aiDsl.impl.ModelImpl#getDefinitions <em>Definitions</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ModelImpl extends MinimalEObjectImpl.Container implements Model
{
  /**
   * The cached value of the '{@link #getPackagedeclaration() <em>Packagedeclaration</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPackagedeclaration()
   * @generated
   * @ordered
   */
  protected PackageDeclaration packagedeclaration;

  /**
   * The cached value of the '{@link #getDefinitions() <em>Definitions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDefinitions()
   * @generated
   * @ordered
   */
  protected EList<EObject> definitions;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ModelImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AiDslPackage.Literals.MODEL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PackageDeclaration getPackagedeclaration()
  {
    return packagedeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPackagedeclaration(PackageDeclaration newPackagedeclaration, NotificationChain msgs)
  {
    PackageDeclaration oldPackagedeclaration = packagedeclaration;
    packagedeclaration = newPackagedeclaration;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AiDslPackage.MODEL__PACKAGEDECLARATION, oldPackagedeclaration, newPackagedeclaration);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPackagedeclaration(PackageDeclaration newPackagedeclaration)
  {
    if (newPackagedeclaration != packagedeclaration)
    {
      NotificationChain msgs = null;
      if (packagedeclaration != null)
        msgs = ((InternalEObject)packagedeclaration).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AiDslPackage.MODEL__PACKAGEDECLARATION, null, msgs);
      if (newPackagedeclaration != null)
        msgs = ((InternalEObject)newPackagedeclaration).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AiDslPackage.MODEL__PACKAGEDECLARATION, null, msgs);
      msgs = basicSetPackagedeclaration(newPackagedeclaration, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AiDslPackage.MODEL__PACKAGEDECLARATION, newPackagedeclaration, newPackagedeclaration));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<EObject> getDefinitions()
  {
    if (definitions == null)
    {
      definitions = new EObjectContainmentEList<EObject>(EObject.class, this, AiDslPackage.MODEL__DEFINITIONS);
    }
    return definitions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AiDslPackage.MODEL__PACKAGEDECLARATION:
        return basicSetPackagedeclaration(null, msgs);
      case AiDslPackage.MODEL__DEFINITIONS:
        return ((InternalEList<?>)getDefinitions()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AiDslPackage.MODEL__PACKAGEDECLARATION:
        return getPackagedeclaration();
      case AiDslPackage.MODEL__DEFINITIONS:
        return getDefinitions();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AiDslPackage.MODEL__PACKAGEDECLARATION:
        setPackagedeclaration((PackageDeclaration)newValue);
        return;
      case AiDslPackage.MODEL__DEFINITIONS:
        getDefinitions().clear();
        getDefinitions().addAll((Collection<? extends EObject>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AiDslPackage.MODEL__PACKAGEDECLARATION:
        setPackagedeclaration((PackageDeclaration)null);
        return;
      case AiDslPackage.MODEL__DEFINITIONS:
        getDefinitions().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AiDslPackage.MODEL__PACKAGEDECLARATION:
        return packagedeclaration != null;
      case AiDslPackage.MODEL__DEFINITIONS:
        return definitions != null && !definitions.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //ModelImpl
