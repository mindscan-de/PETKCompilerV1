/**
 * generated by Xtext 2.27.0
 */
package de.mindscan.ai.aidsl.aiDsl.impl;

import de.mindscan.ai.aidsl.aiDsl.AiDslPackage;
import de.mindscan.ai.aidsl.aiDsl.WorkflowDefinitionApplyLLMNodeResultAssignment;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Workflow Definition Apply LLM Node Result Assignment</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.mindscan.ai.aidsl.aiDsl.impl.WorkflowDefinitionApplyLLMNodeResultAssignmentImpl#getNoderesultname <em>Noderesultname</em>}</li>
 *   <li>{@link de.mindscan.ai.aidsl.aiDsl.impl.WorkflowDefinitionApplyLLMNodeResultAssignmentImpl#getEnvironmentresultname <em>Environmentresultname</em>}</li>
 * </ul>
 *
 * @generated
 */
public class WorkflowDefinitionApplyLLMNodeResultAssignmentImpl extends MinimalEObjectImpl.Container implements WorkflowDefinitionApplyLLMNodeResultAssignment
{
  /**
   * The default value of the '{@link #getNoderesultname() <em>Noderesultname</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNoderesultname()
   * @generated
   * @ordered
   */
  protected static final String NODERESULTNAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getNoderesultname() <em>Noderesultname</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNoderesultname()
   * @generated
   * @ordered
   */
  protected String noderesultname = NODERESULTNAME_EDEFAULT;

  /**
   * The default value of the '{@link #getEnvironmentresultname() <em>Environmentresultname</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEnvironmentresultname()
   * @generated
   * @ordered
   */
  protected static final String ENVIRONMENTRESULTNAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getEnvironmentresultname() <em>Environmentresultname</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEnvironmentresultname()
   * @generated
   * @ordered
   */
  protected String environmentresultname = ENVIRONMENTRESULTNAME_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected WorkflowDefinitionApplyLLMNodeResultAssignmentImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AiDslPackage.Literals.WORKFLOW_DEFINITION_APPLY_LLM_NODE_RESULT_ASSIGNMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getNoderesultname()
  {
    return noderesultname;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNoderesultname(String newNoderesultname)
  {
    String oldNoderesultname = noderesultname;
    noderesultname = newNoderesultname;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AiDslPackage.WORKFLOW_DEFINITION_APPLY_LLM_NODE_RESULT_ASSIGNMENT__NODERESULTNAME, oldNoderesultname, noderesultname));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getEnvironmentresultname()
  {
    return environmentresultname;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEnvironmentresultname(String newEnvironmentresultname)
  {
    String oldEnvironmentresultname = environmentresultname;
    environmentresultname = newEnvironmentresultname;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AiDslPackage.WORKFLOW_DEFINITION_APPLY_LLM_NODE_RESULT_ASSIGNMENT__ENVIRONMENTRESULTNAME, oldEnvironmentresultname, environmentresultname));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AiDslPackage.WORKFLOW_DEFINITION_APPLY_LLM_NODE_RESULT_ASSIGNMENT__NODERESULTNAME:
        return getNoderesultname();
      case AiDslPackage.WORKFLOW_DEFINITION_APPLY_LLM_NODE_RESULT_ASSIGNMENT__ENVIRONMENTRESULTNAME:
        return getEnvironmentresultname();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AiDslPackage.WORKFLOW_DEFINITION_APPLY_LLM_NODE_RESULT_ASSIGNMENT__NODERESULTNAME:
        setNoderesultname((String)newValue);
        return;
      case AiDslPackage.WORKFLOW_DEFINITION_APPLY_LLM_NODE_RESULT_ASSIGNMENT__ENVIRONMENTRESULTNAME:
        setEnvironmentresultname((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AiDslPackage.WORKFLOW_DEFINITION_APPLY_LLM_NODE_RESULT_ASSIGNMENT__NODERESULTNAME:
        setNoderesultname(NODERESULTNAME_EDEFAULT);
        return;
      case AiDslPackage.WORKFLOW_DEFINITION_APPLY_LLM_NODE_RESULT_ASSIGNMENT__ENVIRONMENTRESULTNAME:
        setEnvironmentresultname(ENVIRONMENTRESULTNAME_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AiDslPackage.WORKFLOW_DEFINITION_APPLY_LLM_NODE_RESULT_ASSIGNMENT__NODERESULTNAME:
        return NODERESULTNAME_EDEFAULT == null ? noderesultname != null : !NODERESULTNAME_EDEFAULT.equals(noderesultname);
      case AiDslPackage.WORKFLOW_DEFINITION_APPLY_LLM_NODE_RESULT_ASSIGNMENT__ENVIRONMENTRESULTNAME:
        return ENVIRONMENTRESULTNAME_EDEFAULT == null ? environmentresultname != null : !ENVIRONMENTRESULTNAME_EDEFAULT.equals(environmentresultname);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (noderesultname: ");
    result.append(noderesultname);
    result.append(", environmentresultname: ");
    result.append(environmentresultname);
    result.append(')');
    return result.toString();
  }

} //WorkflowDefinitionApplyLLMNodeResultAssignmentImpl
