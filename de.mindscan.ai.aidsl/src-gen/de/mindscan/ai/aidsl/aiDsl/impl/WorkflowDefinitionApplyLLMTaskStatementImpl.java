/**
 * generated by Xtext 2.27.0
 */
package de.mindscan.ai.aidsl.aiDsl.impl;

import de.mindscan.ai.aidsl.aiDsl.AiDslPackage;
import de.mindscan.ai.aidsl.aiDsl.LlmTaskDefinition;
import de.mindscan.ai.aidsl.aiDsl.WorkflowDefinitionApplyLLMNodeResultAssignment;
import de.mindscan.ai.aidsl.aiDsl.WorkflowDefinitionApplyLLMTaskStatement;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Workflow Definition Apply LLM Task Statement</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.mindscan.ai.aidsl.aiDsl.impl.WorkflowDefinitionApplyLLMTaskStatementImpl#getLlmtask <em>Llmtask</em>}</li>
 *   <li>{@link de.mindscan.ai.aidsl.aiDsl.impl.WorkflowDefinitionApplyLLMTaskStatementImpl#getNoderesultassigments <em>Noderesultassigments</em>}</li>
 * </ul>
 *
 * @generated
 */
public class WorkflowDefinitionApplyLLMTaskStatementImpl extends MinimalEObjectImpl.Container implements WorkflowDefinitionApplyLLMTaskStatement
{
  /**
   * The cached value of the '{@link #getLlmtask() <em>Llmtask</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLlmtask()
   * @generated
   * @ordered
   */
  protected LlmTaskDefinition llmtask;

  /**
   * The cached value of the '{@link #getNoderesultassigments() <em>Noderesultassigments</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNoderesultassigments()
   * @generated
   * @ordered
   */
  protected EList<WorkflowDefinitionApplyLLMNodeResultAssignment> noderesultassigments;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected WorkflowDefinitionApplyLLMTaskStatementImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AiDslPackage.Literals.WORKFLOW_DEFINITION_APPLY_LLM_TASK_STATEMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LlmTaskDefinition getLlmtask()
  {
    if (llmtask != null && llmtask.eIsProxy())
    {
      InternalEObject oldLlmtask = (InternalEObject)llmtask;
      llmtask = (LlmTaskDefinition)eResolveProxy(oldLlmtask);
      if (llmtask != oldLlmtask)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, AiDslPackage.WORKFLOW_DEFINITION_APPLY_LLM_TASK_STATEMENT__LLMTASK, oldLlmtask, llmtask));
      }
    }
    return llmtask;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LlmTaskDefinition basicGetLlmtask()
  {
    return llmtask;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLlmtask(LlmTaskDefinition newLlmtask)
  {
    LlmTaskDefinition oldLlmtask = llmtask;
    llmtask = newLlmtask;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AiDslPackage.WORKFLOW_DEFINITION_APPLY_LLM_TASK_STATEMENT__LLMTASK, oldLlmtask, llmtask));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<WorkflowDefinitionApplyLLMNodeResultAssignment> getNoderesultassigments()
  {
    if (noderesultassigments == null)
    {
      noderesultassigments = new EObjectContainmentEList<WorkflowDefinitionApplyLLMNodeResultAssignment>(WorkflowDefinitionApplyLLMNodeResultAssignment.class, this, AiDslPackage.WORKFLOW_DEFINITION_APPLY_LLM_TASK_STATEMENT__NODERESULTASSIGMENTS);
    }
    return noderesultassigments;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AiDslPackage.WORKFLOW_DEFINITION_APPLY_LLM_TASK_STATEMENT__NODERESULTASSIGMENTS:
        return ((InternalEList<?>)getNoderesultassigments()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AiDslPackage.WORKFLOW_DEFINITION_APPLY_LLM_TASK_STATEMENT__LLMTASK:
        if (resolve) return getLlmtask();
        return basicGetLlmtask();
      case AiDslPackage.WORKFLOW_DEFINITION_APPLY_LLM_TASK_STATEMENT__NODERESULTASSIGMENTS:
        return getNoderesultassigments();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AiDslPackage.WORKFLOW_DEFINITION_APPLY_LLM_TASK_STATEMENT__LLMTASK:
        setLlmtask((LlmTaskDefinition)newValue);
        return;
      case AiDslPackage.WORKFLOW_DEFINITION_APPLY_LLM_TASK_STATEMENT__NODERESULTASSIGMENTS:
        getNoderesultassigments().clear();
        getNoderesultassigments().addAll((Collection<? extends WorkflowDefinitionApplyLLMNodeResultAssignment>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AiDslPackage.WORKFLOW_DEFINITION_APPLY_LLM_TASK_STATEMENT__LLMTASK:
        setLlmtask((LlmTaskDefinition)null);
        return;
      case AiDslPackage.WORKFLOW_DEFINITION_APPLY_LLM_TASK_STATEMENT__NODERESULTASSIGMENTS:
        getNoderesultassigments().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AiDslPackage.WORKFLOW_DEFINITION_APPLY_LLM_TASK_STATEMENT__LLMTASK:
        return llmtask != null;
      case AiDslPackage.WORKFLOW_DEFINITION_APPLY_LLM_TASK_STATEMENT__NODERESULTASSIGMENTS:
        return noderesultassigments != null && !noderesultassigments.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //WorkflowDefinitionApplyLLMTaskStatementImpl
