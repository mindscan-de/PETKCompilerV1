/**
 * generated by Xtext 2.27.0
 */
package de.mindscan.ai.aidsl.aiDsl.util;

import de.mindscan.ai.aidsl.aiDsl.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see de.mindscan.ai.aidsl.aiDsl.AiDslPackage
 * @generated
 */
public class AiDslAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static AiDslPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AiDslAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = AiDslPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AiDslSwitch<Adapter> modelSwitch =
    new AiDslSwitch<Adapter>()
    {
      @Override
      public Adapter caseModel(Model object)
      {
        return createModelAdapter();
      }
      @Override
      public Adapter casePackageDeclaration(PackageDeclaration object)
      {
        return createPackageDeclarationAdapter();
      }
      @Override
      public Adapter caseImportDeclaration(ImportDeclaration object)
      {
        return createImportDeclarationAdapter();
      }
      @Override
      public Adapter caseVMNodeDefinition(VMNodeDefinition object)
      {
        return createVMNodeDefinitionAdapter();
      }
      @Override
      public Adapter caseVMNodeEleemnts(VMNodeEleemnts object)
      {
        return createVMNodeEleemntsAdapter();
      }
      @Override
      public Adapter caseVMNodeOpCodeElement(VMNodeOpCodeElement object)
      {
        return createVMNodeOpCodeElementAdapter();
      }
      @Override
      public Adapter caseVMNodeOutElements(VMNodeOutElements object)
      {
        return createVMNodeOutElementsAdapter();
      }
      @Override
      public Adapter caseVMNodeInElements(VMNodeInElements object)
      {
        return createVMNodeInElementsAdapter();
      }
      @Override
      public Adapter caseVMNodeFieldElements(VMNodeFieldElements object)
      {
        return createVMNodeFieldElementsAdapter();
      }
      @Override
      public Adapter caseVMNodeOutElement(VMNodeOutElement object)
      {
        return createVMNodeOutElementAdapter();
      }
      @Override
      public Adapter caseVMNodeInElement(VMNodeInElement object)
      {
        return createVMNodeInElementAdapter();
      }
      @Override
      public Adapter caseVMFieldElement(VMFieldElement object)
      {
        return createVMFieldElementAdapter();
      }
      @Override
      public Adapter caseVMOverrideFieldElement(VMOverrideFieldElement object)
      {
        return createVMOverrideFieldElementAdapter();
      }
      @Override
      public Adapter caseLlmTaskDefinition(LlmTaskDefinition object)
      {
        return createLlmTaskDefinitionAdapter();
      }
      @Override
      public Adapter caseAnnotationInterfaceReference(AnnotationInterfaceReference object)
      {
        return createAnnotationInterfaceReferenceAdapter();
      }
      @Override
      public Adapter caseLlmVariableAssignment(LlmVariableAssignment object)
      {
        return createLlmVariableAssignmentAdapter();
      }
      @Override
      public Adapter caseWorkflowDefinition(WorkflowDefinition object)
      {
        return createWorkflowDefinitionAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link de.mindscan.ai.aidsl.aiDsl.Model <em>Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.mindscan.ai.aidsl.aiDsl.Model
   * @generated
   */
  public Adapter createModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.mindscan.ai.aidsl.aiDsl.PackageDeclaration <em>Package Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.mindscan.ai.aidsl.aiDsl.PackageDeclaration
   * @generated
   */
  public Adapter createPackageDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.mindscan.ai.aidsl.aiDsl.ImportDeclaration <em>Import Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.mindscan.ai.aidsl.aiDsl.ImportDeclaration
   * @generated
   */
  public Adapter createImportDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.mindscan.ai.aidsl.aiDsl.VMNodeDefinition <em>VM Node Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.mindscan.ai.aidsl.aiDsl.VMNodeDefinition
   * @generated
   */
  public Adapter createVMNodeDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.mindscan.ai.aidsl.aiDsl.VMNodeEleemnts <em>VM Node Eleemnts</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.mindscan.ai.aidsl.aiDsl.VMNodeEleemnts
   * @generated
   */
  public Adapter createVMNodeEleemntsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.mindscan.ai.aidsl.aiDsl.VMNodeOpCodeElement <em>VM Node Op Code Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.mindscan.ai.aidsl.aiDsl.VMNodeOpCodeElement
   * @generated
   */
  public Adapter createVMNodeOpCodeElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.mindscan.ai.aidsl.aiDsl.VMNodeOutElements <em>VM Node Out Elements</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.mindscan.ai.aidsl.aiDsl.VMNodeOutElements
   * @generated
   */
  public Adapter createVMNodeOutElementsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.mindscan.ai.aidsl.aiDsl.VMNodeInElements <em>VM Node In Elements</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.mindscan.ai.aidsl.aiDsl.VMNodeInElements
   * @generated
   */
  public Adapter createVMNodeInElementsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.mindscan.ai.aidsl.aiDsl.VMNodeFieldElements <em>VM Node Field Elements</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.mindscan.ai.aidsl.aiDsl.VMNodeFieldElements
   * @generated
   */
  public Adapter createVMNodeFieldElementsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.mindscan.ai.aidsl.aiDsl.VMNodeOutElement <em>VM Node Out Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.mindscan.ai.aidsl.aiDsl.VMNodeOutElement
   * @generated
   */
  public Adapter createVMNodeOutElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.mindscan.ai.aidsl.aiDsl.VMNodeInElement <em>VM Node In Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.mindscan.ai.aidsl.aiDsl.VMNodeInElement
   * @generated
   */
  public Adapter createVMNodeInElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.mindscan.ai.aidsl.aiDsl.VMFieldElement <em>VM Field Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.mindscan.ai.aidsl.aiDsl.VMFieldElement
   * @generated
   */
  public Adapter createVMFieldElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.mindscan.ai.aidsl.aiDsl.VMOverrideFieldElement <em>VM Override Field Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.mindscan.ai.aidsl.aiDsl.VMOverrideFieldElement
   * @generated
   */
  public Adapter createVMOverrideFieldElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.mindscan.ai.aidsl.aiDsl.LlmTaskDefinition <em>Llm Task Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.mindscan.ai.aidsl.aiDsl.LlmTaskDefinition
   * @generated
   */
  public Adapter createLlmTaskDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.mindscan.ai.aidsl.aiDsl.AnnotationInterfaceReference <em>Annotation Interface Reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.mindscan.ai.aidsl.aiDsl.AnnotationInterfaceReference
   * @generated
   */
  public Adapter createAnnotationInterfaceReferenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.mindscan.ai.aidsl.aiDsl.LlmVariableAssignment <em>Llm Variable Assignment</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.mindscan.ai.aidsl.aiDsl.LlmVariableAssignment
   * @generated
   */
  public Adapter createLlmVariableAssignmentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.mindscan.ai.aidsl.aiDsl.WorkflowDefinition <em>Workflow Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.mindscan.ai.aidsl.aiDsl.WorkflowDefinition
   * @generated
   */
  public Adapter createWorkflowDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //AiDslAdapterFactory
