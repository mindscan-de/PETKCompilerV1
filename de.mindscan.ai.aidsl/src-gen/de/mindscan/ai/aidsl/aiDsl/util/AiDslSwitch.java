/**
 * generated by Xtext 2.27.0
 */
package de.mindscan.ai.aidsl.aiDsl.util;

import de.mindscan.ai.aidsl.aiDsl.*;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see de.mindscan.ai.aidsl.aiDsl.AiDslPackage
 * @generated
 */
public class AiDslSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static AiDslPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AiDslSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = AiDslPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case AiDslPackage.MODEL:
      {
        Model model = (Model)theEObject;
        T result = caseModel(model);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AiDslPackage.WORKFLOW_FUNCTIONS_DEFINITION:
      {
        WorkflowFunctionsDefinition workflowFunctionsDefinition = (WorkflowFunctionsDefinition)theEObject;
        T result = caseWorkflowFunctionsDefinition(workflowFunctionsDefinition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AiDslPackage.SAI_MEMBER:
      {
        SAIMember saiMember = (SAIMember)theEObject;
        T result = caseSAIMember(saiMember);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AiDslPackage.SAI_FIELD:
      {
        SAIField saiField = (SAIField)theEObject;
        T result = caseSAIField(saiField);
        if (result == null) result = caseSAIMember(saiField);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AiDslPackage.SAI_METHOD:
      {
        SAIMethod saiMethod = (SAIMethod)theEObject;
        T result = caseSAIMethod(saiMethod);
        if (result == null) result = caseSAIMember(saiMethod);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AiDslPackage.SAI_PARAMETER:
      {
        SAIParameter saiParameter = (SAIParameter)theEObject;
        T result = caseSAIParameter(saiParameter);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AiDslPackage.SAI_BLOCK:
      {
        SAIBlock saiBlock = (SAIBlock)theEObject;
        T result = caseSAIBlock(saiBlock);
        if (result == null) result = caseSAIIfBlock(saiBlock);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AiDslPackage.SAI_STATEMENT:
      {
        SAIStatement saiStatement = (SAIStatement)theEObject;
        T result = caseSAIStatement(saiStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AiDslPackage.SAI_VARIABLE_DECLARATION:
      {
        SAIVariableDeclaration saiVariableDeclaration = (SAIVariableDeclaration)theEObject;
        T result = caseSAIVariableDeclaration(saiVariableDeclaration);
        if (result == null) result = caseSAIStatement(saiVariableDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AiDslPackage.SAI_RETURN:
      {
        SAIReturn saiReturn = (SAIReturn)theEObject;
        T result = caseSAIReturn(saiReturn);
        if (result == null) result = caseSAIStatement(saiReturn);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AiDslPackage.SAI_IF_STATEMENT:
      {
        SAIIfStatement saiIfStatement = (SAIIfStatement)theEObject;
        T result = caseSAIIfStatement(saiIfStatement);
        if (result == null) result = caseSAIStatement(saiIfStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AiDslPackage.SAI_IF_BLOCK:
      {
        SAIIfBlock saiIfBlock = (SAIIfBlock)theEObject;
        T result = caseSAIIfBlock(saiIfBlock);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AiDslPackage.SAI_EXPRESSION:
      {
        SAIExpression saiExpression = (SAIExpression)theEObject;
        T result = caseSAIExpression(saiExpression);
        if (result == null) result = caseSAIStatement(saiExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AiDslPackage.PACKAGE_DECLARATION:
      {
        PackageDeclaration packageDeclaration = (PackageDeclaration)theEObject;
        T result = casePackageDeclaration(packageDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AiDslPackage.IMPORT_DECLARATION:
      {
        ImportDeclaration importDeclaration = (ImportDeclaration)theEObject;
        T result = caseImportDeclaration(importDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AiDslPackage.WORKFLOW_INPUT_DEFINITION:
      {
        WorkflowInputDefinition workflowInputDefinition = (WorkflowInputDefinition)theEObject;
        T result = caseWorkflowInputDefinition(workflowInputDefinition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AiDslPackage.WORKFLOW_UI_ELEMENT:
      {
        WorkflowUIElement workflowUIElement = (WorkflowUIElement)theEObject;
        T result = caseWorkflowUIElement(workflowUIElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AiDslPackage.WORKFLOW_UI_ELEMENT_MAP:
      {
        WorkflowUIElementMap workflowUIElementMap = (WorkflowUIElementMap)theEObject;
        T result = caseWorkflowUIElementMap(workflowUIElementMap);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AiDslPackage.WORKFLOW_DATA_DICTIONARY_DEFINITION:
      {
        WorkflowDataDictionaryDefinition workflowDataDictionaryDefinition = (WorkflowDataDictionaryDefinition)theEObject;
        T result = caseWorkflowDataDictionaryDefinition(workflowDataDictionaryDefinition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AiDslPackage.DATADICTIONARY_KEY_VALUE_PAIR:
      {
        DatadictionaryKeyValuePair datadictionaryKeyValuePair = (DatadictionaryKeyValuePair)theEObject;
        T result = caseDatadictionaryKeyValuePair(datadictionaryKeyValuePair);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AiDslPackage.DATA_DICTIONARY_VALUE:
      {
        DataDictionaryValue dataDictionaryValue = (DataDictionaryValue)theEObject;
        T result = caseDataDictionaryValue(dataDictionaryValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AiDslPackage.DATA_DICTIONARY_ARRAY_VALUE:
      {
        DataDictionaryArrayValue dataDictionaryArrayValue = (DataDictionaryArrayValue)theEObject;
        T result = caseDataDictionaryArrayValue(dataDictionaryArrayValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AiDslPackage.DATA_DICTIONARY_MAP_VALUE:
      {
        DataDictionaryMapValue dataDictionaryMapValue = (DataDictionaryMapValue)theEObject;
        T result = caseDataDictionaryMapValue(dataDictionaryMapValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AiDslPackage.DATA_DICTIONARY_BOOLEAN_VALUE:
      {
        DataDictionaryBooleanValue dataDictionaryBooleanValue = (DataDictionaryBooleanValue)theEObject;
        T result = caseDataDictionaryBooleanValue(dataDictionaryBooleanValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AiDslPackage.DATA_DICTIONARY_STRING_VALUE:
      {
        DataDictionaryStringValue dataDictionaryStringValue = (DataDictionaryStringValue)theEObject;
        T result = caseDataDictionaryStringValue(dataDictionaryStringValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AiDslPackage.DATA_DICTIONARY_NULL_VALUE:
      {
        DataDictionaryNullValue dataDictionaryNullValue = (DataDictionaryNullValue)theEObject;
        T result = caseDataDictionaryNullValue(dataDictionaryNullValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AiDslPackage.VM_NODE_DEFINITION:
      {
        VMNodeDefinition vmNodeDefinition = (VMNodeDefinition)theEObject;
        T result = caseVMNodeDefinition(vmNodeDefinition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AiDslPackage.VM_NODE_ELEEMNTS:
      {
        VMNodeEleemnts vmNodeEleemnts = (VMNodeEleemnts)theEObject;
        T result = caseVMNodeEleemnts(vmNodeEleemnts);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AiDslPackage.VM_NODE_OP_CODE_ELEMENT:
      {
        VMNodeOpCodeElement vmNodeOpCodeElement = (VMNodeOpCodeElement)theEObject;
        T result = caseVMNodeOpCodeElement(vmNodeOpCodeElement);
        if (result == null) result = caseVMNodeEleemnts(vmNodeOpCodeElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AiDslPackage.VM_NODE_OUT_ELEMENTS:
      {
        VMNodeOutElements vmNodeOutElements = (VMNodeOutElements)theEObject;
        T result = caseVMNodeOutElements(vmNodeOutElements);
        if (result == null) result = caseVMNodeEleemnts(vmNodeOutElements);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AiDslPackage.VM_NODE_IN_ELEMENTS:
      {
        VMNodeInElements vmNodeInElements = (VMNodeInElements)theEObject;
        T result = caseVMNodeInElements(vmNodeInElements);
        if (result == null) result = caseVMNodeEleemnts(vmNodeInElements);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AiDslPackage.VM_NODE_FIELD_ELEMENTS:
      {
        VMNodeFieldElements vmNodeFieldElements = (VMNodeFieldElements)theEObject;
        T result = caseVMNodeFieldElements(vmNodeFieldElements);
        if (result == null) result = caseVMNodeEleemnts(vmNodeFieldElements);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AiDslPackage.VM_NODE_OUT_ELEMENT:
      {
        VMNodeOutElement vmNodeOutElement = (VMNodeOutElement)theEObject;
        T result = caseVMNodeOutElement(vmNodeOutElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AiDslPackage.VM_NODE_IN_ELEMENT:
      {
        VMNodeInElement vmNodeInElement = (VMNodeInElement)theEObject;
        T result = caseVMNodeInElement(vmNodeInElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AiDslPackage.VM_FIELD_ELEMENT:
      {
        VMFieldElement vmFieldElement = (VMFieldElement)theEObject;
        T result = caseVMFieldElement(vmFieldElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AiDslPackage.VM_OVERRIDE_FIELD_ELEMENT:
      {
        VMOverrideFieldElement vmOverrideFieldElement = (VMOverrideFieldElement)theEObject;
        T result = caseVMOverrideFieldElement(vmOverrideFieldElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AiDslPackage.LLM_TASK_DEFINITION:
      {
        LlmTaskDefinition llmTaskDefinition = (LlmTaskDefinition)theEObject;
        T result = caseLlmTaskDefinition(llmTaskDefinition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AiDslPackage.ANNOTATION_INTERFACE_REFERENCE:
      {
        AnnotationInterfaceReference annotationInterfaceReference = (AnnotationInterfaceReference)theEObject;
        T result = caseAnnotationInterfaceReference(annotationInterfaceReference);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AiDslPackage.LLM_VARIABLE_ASSIGNMENT:
      {
        LlmVariableAssignment llmVariableAssignment = (LlmVariableAssignment)theEObject;
        T result = caseLlmVariableAssignment(llmVariableAssignment);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AiDslPackage.WORKFLOW_DEFINITION:
      {
        WorkflowDefinition workflowDefinition = (WorkflowDefinition)theEObject;
        T result = caseWorkflowDefinition(workflowDefinition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AiDslPackage.WORKFLOW_IF_STATEMENT:
      {
        WorkflowIfStatement workflowIfStatement = (WorkflowIfStatement)theEObject;
        T result = caseWorkflowIfStatement(workflowIfStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AiDslPackage.WORKFLOW_DEFINITION_APPLY_LLM_TASK_STATEMENT:
      {
        WorkflowDefinitionApplyLLMTaskStatement workflowDefinitionApplyLLMTaskStatement = (WorkflowDefinitionApplyLLMTaskStatement)theEObject;
        T result = caseWorkflowDefinitionApplyLLMTaskStatement(workflowDefinitionApplyLLMTaskStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AiDslPackage.WORKFLOW_DEFINITION_APPLY_LLM_NODE_RESULT_ASSIGNMENT:
      {
        WorkflowDefinitionApplyLLMNodeResultAssignment workflowDefinitionApplyLLMNodeResultAssignment = (WorkflowDefinitionApplyLLMNodeResultAssignment)theEObject;
        T result = caseWorkflowDefinitionApplyLLMNodeResultAssignment(workflowDefinitionApplyLLMNodeResultAssignment);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AiDslPackage.ELEMENTTYPE:
      {
        ELEMENTTYPE elementtype = (ELEMENTTYPE)theEObject;
        T result = caseELEMENTTYPE(elementtype);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AiDslPackage.BASICTYPE:
      {
        BASICTYPE basictype = (BASICTYPE)theEObject;
        T result = caseBASICTYPE(basictype);
        if (result == null) result = caseELEMENTTYPE(basictype);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AiDslPackage.SAI_ASSIGNMENT:
      {
        SAIAssignment saiAssignment = (SAIAssignment)theEObject;
        T result = caseSAIAssignment(saiAssignment);
        if (result == null) result = caseSAIExpression(saiAssignment);
        if (result == null) result = caseSAIStatement(saiAssignment);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AiDslPackage.SAI_MEMBER_SELECTION:
      {
        SAIMemberSelection saiMemberSelection = (SAIMemberSelection)theEObject;
        T result = caseSAIMemberSelection(saiMemberSelection);
        if (result == null) result = caseSAIExpression(saiMemberSelection);
        if (result == null) result = caseSAIStatement(saiMemberSelection);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AiDslPackage.SAI_STRING_CONSTANT:
      {
        SAIStringConstant saiStringConstant = (SAIStringConstant)theEObject;
        T result = caseSAIStringConstant(saiStringConstant);
        if (result == null) result = caseSAIExpression(saiStringConstant);
        if (result == null) result = caseSAIStatement(saiStringConstant);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AiDslPackage.SAI_INT_CONSTANT:
      {
        SAIIntConstant saiIntConstant = (SAIIntConstant)theEObject;
        T result = caseSAIIntConstant(saiIntConstant);
        if (result == null) result = caseSAIExpression(saiIntConstant);
        if (result == null) result = caseSAIStatement(saiIntConstant);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AiDslPackage.SAI_BOOL_CONSTANT:
      {
        SAIBoolConstant saiBoolConstant = (SAIBoolConstant)theEObject;
        T result = caseSAIBoolConstant(saiBoolConstant);
        if (result == null) result = caseSAIExpression(saiBoolConstant);
        if (result == null) result = caseSAIStatement(saiBoolConstant);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AiDslPackage.SAI_NULL:
      {
        SAINull saiNull = (SAINull)theEObject;
        T result = caseSAINull(saiNull);
        if (result == null) result = caseSAIExpression(saiNull);
        if (result == null) result = caseSAIStatement(saiNull);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Model</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Model</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModel(Model object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Workflow Functions Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Workflow Functions Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseWorkflowFunctionsDefinition(WorkflowFunctionsDefinition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>SAI Member</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>SAI Member</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSAIMember(SAIMember object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>SAI Field</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>SAI Field</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSAIField(SAIField object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>SAI Method</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>SAI Method</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSAIMethod(SAIMethod object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>SAI Parameter</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>SAI Parameter</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSAIParameter(SAIParameter object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>SAI Block</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>SAI Block</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSAIBlock(SAIBlock object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>SAI Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>SAI Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSAIStatement(SAIStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>SAI Variable Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>SAI Variable Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSAIVariableDeclaration(SAIVariableDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>SAI Return</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>SAI Return</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSAIReturn(SAIReturn object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>SAI If Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>SAI If Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSAIIfStatement(SAIIfStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>SAI If Block</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>SAI If Block</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSAIIfBlock(SAIIfBlock object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>SAI Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>SAI Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSAIExpression(SAIExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Package Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Package Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePackageDeclaration(PackageDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Import Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Import Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseImportDeclaration(ImportDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Workflow Input Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Workflow Input Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseWorkflowInputDefinition(WorkflowInputDefinition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Workflow UI Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Workflow UI Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseWorkflowUIElement(WorkflowUIElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Workflow UI Element Map</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Workflow UI Element Map</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseWorkflowUIElementMap(WorkflowUIElementMap object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Workflow Data Dictionary Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Workflow Data Dictionary Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseWorkflowDataDictionaryDefinition(WorkflowDataDictionaryDefinition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Datadictionary Key Value Pair</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Datadictionary Key Value Pair</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDatadictionaryKeyValuePair(DatadictionaryKeyValuePair object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Data Dictionary Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Data Dictionary Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDataDictionaryValue(DataDictionaryValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Data Dictionary Array Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Data Dictionary Array Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDataDictionaryArrayValue(DataDictionaryArrayValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Data Dictionary Map Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Data Dictionary Map Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDataDictionaryMapValue(DataDictionaryMapValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Data Dictionary Boolean Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Data Dictionary Boolean Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDataDictionaryBooleanValue(DataDictionaryBooleanValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Data Dictionary String Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Data Dictionary String Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDataDictionaryStringValue(DataDictionaryStringValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Data Dictionary Null Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Data Dictionary Null Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDataDictionaryNullValue(DataDictionaryNullValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>VM Node Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>VM Node Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVMNodeDefinition(VMNodeDefinition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>VM Node Eleemnts</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>VM Node Eleemnts</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVMNodeEleemnts(VMNodeEleemnts object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>VM Node Op Code Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>VM Node Op Code Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVMNodeOpCodeElement(VMNodeOpCodeElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>VM Node Out Elements</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>VM Node Out Elements</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVMNodeOutElements(VMNodeOutElements object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>VM Node In Elements</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>VM Node In Elements</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVMNodeInElements(VMNodeInElements object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>VM Node Field Elements</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>VM Node Field Elements</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVMNodeFieldElements(VMNodeFieldElements object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>VM Node Out Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>VM Node Out Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVMNodeOutElement(VMNodeOutElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>VM Node In Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>VM Node In Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVMNodeInElement(VMNodeInElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>VM Field Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>VM Field Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVMFieldElement(VMFieldElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>VM Override Field Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>VM Override Field Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVMOverrideFieldElement(VMOverrideFieldElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Llm Task Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Llm Task Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLlmTaskDefinition(LlmTaskDefinition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Annotation Interface Reference</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Annotation Interface Reference</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAnnotationInterfaceReference(AnnotationInterfaceReference object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Llm Variable Assignment</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Llm Variable Assignment</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLlmVariableAssignment(LlmVariableAssignment object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Workflow Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Workflow Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseWorkflowDefinition(WorkflowDefinition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Workflow If Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Workflow If Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseWorkflowIfStatement(WorkflowIfStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Workflow Definition Apply LLM Task Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Workflow Definition Apply LLM Task Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseWorkflowDefinitionApplyLLMTaskStatement(WorkflowDefinitionApplyLLMTaskStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Workflow Definition Apply LLM Node Result Assignment</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Workflow Definition Apply LLM Node Result Assignment</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseWorkflowDefinitionApplyLLMNodeResultAssignment(WorkflowDefinitionApplyLLMNodeResultAssignment object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ELEMENTTYPE</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ELEMENTTYPE</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseELEMENTTYPE(ELEMENTTYPE object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>BASICTYPE</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>BASICTYPE</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBASICTYPE(BASICTYPE object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>SAI Assignment</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>SAI Assignment</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSAIAssignment(SAIAssignment object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>SAI Member Selection</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>SAI Member Selection</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSAIMemberSelection(SAIMemberSelection object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>SAI String Constant</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>SAI String Constant</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSAIStringConstant(SAIStringConstant object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>SAI Int Constant</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>SAI Int Constant</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSAIIntConstant(SAIIntConstant object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>SAI Bool Constant</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>SAI Bool Constant</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSAIBoolConstant(SAIBoolConstant object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>SAI Null</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>SAI Null</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSAINull(SAINull object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //AiDslSwitch
