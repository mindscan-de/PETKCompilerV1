/*
 * generated by Xtext 2.27.0
 */
grammar InternalAiDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package de.mindscan.ai.aidsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.mindscan.ai.aidsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.mindscan.ai.aidsl.services.AiDslGrammarAccess;

}

@parser::members {

 	private AiDslGrammarAccess grammarAccess;

    public InternalAiDslParser(TokenStream input, AiDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected AiDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getPackage_declarationPackageDeclarationParserRuleCall_0_0());
				}
				lv_package_declaration_0_0=rulePackageDeclaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					set(
						$current,
						"package_declaration",
						lv_package_declaration_0_0,
						"de.mindscan.ai.aidsl.AiDsl.PackageDeclaration");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getImport_declarationsImportDeclarationParserRuleCall_1_0());
				}
				lv_import_declarations_1_0=ruleImportDeclaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"import_declarations",
						lv_import_declarations_1_0,
						"de.mindscan.ai.aidsl.AiDsl.ImportDeclaration");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getModelAccess().getDefinitionsWorkflowDefinitionParserRuleCall_2_0_0());
					}
					lv_definitions_2_1=ruleWorkflowDefinition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getModelRule());
						}
						add(
							$current,
							"definitions",
							lv_definitions_2_1,
							"de.mindscan.ai.aidsl.AiDsl.WorkflowDefinition");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getModelAccess().getDefinitionsWorkflowDataDictionaryDefinitionParserRuleCall_2_0_1());
					}
					lv_definitions_2_2=ruleWorkflowDataDictionaryDefinition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getModelRule());
						}
						add(
							$current,
							"definitions",
							lv_definitions_2_2,
							"de.mindscan.ai.aidsl.AiDsl.WorkflowDataDictionaryDefinition");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getModelAccess().getDefinitionsWorkflowInputDefinitionParserRuleCall_2_0_2());
					}
					lv_definitions_2_3=ruleWorkflowInputDefinition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getModelRule());
						}
						add(
							$current,
							"definitions",
							lv_definitions_2_3,
							"de.mindscan.ai.aidsl.AiDsl.WorkflowInputDefinition");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getModelAccess().getDefinitionsLlmTaskDefinitionParserRuleCall_2_0_3());
					}
					lv_definitions_2_4=ruleLlmTaskDefinition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getModelRule());
						}
						add(
							$current,
							"definitions",
							lv_definitions_2_4,
							"de.mindscan.ai.aidsl.AiDsl.LlmTaskDefinition");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getModelAccess().getDefinitionsVMNodeDefinitionParserRuleCall_2_0_4());
					}
					lv_definitions_2_5=ruleVMNodeDefinition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getModelRule());
						}
						add(
							$current,
							"definitions",
							lv_definitions_2_5,
							"de.mindscan.ai.aidsl.AiDsl.VMNodeDefinition");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulePackageDeclaration
entryRulePackageDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPackageDeclarationRule()); }
	iv_rulePackageDeclaration=rulePackageDeclaration
	{ $current=$iv_rulePackageDeclaration.current; }
	EOF;

// Rule PackageDeclaration
rulePackageDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='package'
		{
			newLeafNode(otherlv_0, grammarAccess.getPackageDeclarationAccess().getPackageKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPackageDeclarationAccess().getNameQualifiedNameParserRuleCall_1_0());
				}
				lv_name_1_0=ruleQualifiedName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPackageDeclarationRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"de.mindscan.ai.aidsl.AiDsl.QualifiedName");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleImportDeclaration
entryRuleImportDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getImportDeclarationRule()); }
	iv_ruleImportDeclaration=ruleImportDeclaration
	{ $current=$iv_ruleImportDeclaration.current; }
	EOF;

// Rule ImportDeclaration
ruleImportDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='import'
		{
			newLeafNode(otherlv_0, grammarAccess.getImportDeclarationAccess().getImportKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getImportDeclarationAccess().getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0());
				}
				lv_importedNamespace_1_0=ruleQualifiedNameWithWildcard
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getImportDeclarationRule());
					}
					set(
						$current,
						"importedNamespace",
						lv_importedNamespace_1_0,
						"de.mindscan.ai.aidsl.AiDsl.QualifiedNameWithWildcard");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleWorkflowInputDefinition
entryRuleWorkflowInputDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWorkflowInputDefinitionRule()); }
	iv_ruleWorkflowInputDefinition=ruleWorkflowInputDefinition
	{ $current=$iv_ruleWorkflowInputDefinition.current; }
	EOF;

// Rule WorkflowInputDefinition
ruleWorkflowInputDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getWorkflowInputDefinitionAccess().getWorkflowInputDefinitionAction_0(),
					$current);
			}
		)
		otherlv_1='datainput'
		{
			newLeafNode(otherlv_1, grammarAccess.getWorkflowInputDefinitionAccess().getDatainputKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getWorkflowInputDefinitionAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getWorkflowInputDefinitionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"de.mindscan.ai.aidsl.AiDsl.ID");
				}
			)
		)
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getWorkflowInputDefinitionAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWorkflowInputDefinitionAccess().getUiElementsWorkflowUIElementParserRuleCall_4_0());
				}
				lv_uiElements_4_0=ruleWorkflowUIElement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWorkflowInputDefinitionRule());
					}
					add(
						$current,
						"uiElements",
						lv_uiElements_4_0,
						"de.mindscan.ai.aidsl.AiDsl.WorkflowUIElement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getWorkflowInputDefinitionAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleWorkflowUIElement
entryRuleWorkflowUIElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWorkflowUIElementRule()); }
	iv_ruleWorkflowUIElement=ruleWorkflowUIElement
	{ $current=$iv_ruleWorkflowUIElement.current; }
	EOF;

// Rule WorkflowUIElement
ruleWorkflowUIElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getWorkflowUIElementAccess().getNameQualifiedNameParserRuleCall_0_0());
				}
				lv_name_0_0=ruleQualifiedName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWorkflowUIElementRule());
					}
					set(
						$current,
						"name",
						lv_name_0_0,
						"de.mindscan.ai.aidsl.AiDsl.QualifiedName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getWorkflowUIElementAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWorkflowUIElementAccess().getDatatypeELEMENTTYPEParserRuleCall_2_0());
				}
				lv_datatype_2_0=ruleELEMENTTYPE
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWorkflowUIElementRule());
					}
					set(
						$current,
						"datatype",
						lv_datatype_2_0,
						"de.mindscan.ai.aidsl.AiDsl.ELEMENTTYPE");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getWorkflowUIElementAccess().getUielementWorkflowUIElementMapParserRuleCall_3_0());
				}
				lv_uielement_3_0=ruleWorkflowUIElementMap
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWorkflowUIElementRule());
					}
					set(
						$current,
						"uielement",
						lv_uielement_3_0,
						"de.mindscan.ai.aidsl.AiDsl.WorkflowUIElementMap");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleWorkflowUIElementMap
entryRuleWorkflowUIElementMap returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWorkflowUIElementMapRule()); }
	iv_ruleWorkflowUIElementMap=ruleWorkflowUIElementMap
	{ $current=$iv_ruleWorkflowUIElementMap.current; }
	EOF;

// Rule WorkflowUIElementMap
ruleWorkflowUIElementMap returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='ui'
		{
			newLeafNode(otherlv_0, grammarAccess.getWorkflowUIElementMapAccess().getUiKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getWorkflowUIElementMapAccess().getLeftCurlyBracketKeyword_1());
		}
		otherlv_2='label'
		{
			newLeafNode(otherlv_2, grammarAccess.getWorkflowUIElementMapAccess().getLabelKeyword_2());
		}
		(
			(
				lv_label_3_0=RULE_STRING
				{
					newLeafNode(lv_label_3_0, grammarAccess.getWorkflowUIElementMapAccess().getLabelSTRINGTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getWorkflowUIElementMapRule());
					}
					setWithLastConsumed(
						$current,
						"label",
						lv_label_3_0,
						"de.mindscan.ai.aidsl.AiDsl.STRING");
				}
			)
		)
		otherlv_4='uitype'
		{
			newLeafNode(otherlv_4, grammarAccess.getWorkflowUIElementMapAccess().getUitypeKeyword_4());
		}
		(
			(
				lv_uitype_5_0=RULE_STRING
				{
					newLeafNode(lv_uitype_5_0, grammarAccess.getWorkflowUIElementMapAccess().getUitypeSTRINGTerminalRuleCall_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getWorkflowUIElementMapRule());
					}
					setWithLastConsumed(
						$current,
						"uitype",
						lv_uitype_5_0,
						"de.mindscan.ai.aidsl.AiDsl.STRING");
				}
			)
		)
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getWorkflowUIElementMapAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleWorkflowDataDictionaryDefinition
entryRuleWorkflowDataDictionaryDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWorkflowDataDictionaryDefinitionRule()); }
	iv_ruleWorkflowDataDictionaryDefinition=ruleWorkflowDataDictionaryDefinition
	{ $current=$iv_ruleWorkflowDataDictionaryDefinition.current; }
	EOF;

// Rule WorkflowDataDictionaryDefinition
ruleWorkflowDataDictionaryDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getWorkflowDataDictionaryDefinitionAccess().getWorkflowDataDictionaryDefinitionAction_0(),
					$current);
			}
		)
		otherlv_1='datadictionary'
		{
			newLeafNode(otherlv_1, grammarAccess.getWorkflowDataDictionaryDefinitionAccess().getDatadictionaryKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getWorkflowDataDictionaryDefinitionAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWorkflowDataDictionaryDefinitionAccess().getDataDictionaryElementsWorkflowDataDictionaryElementParserRuleCall_3_0());
				}
				lv_dataDictionaryElements_3_0=ruleWorkflowDataDictionaryElement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWorkflowDataDictionaryDefinitionRule());
					}
					add(
						$current,
						"dataDictionaryElements",
						lv_dataDictionaryElements_3_0,
						"de.mindscan.ai.aidsl.AiDsl.WorkflowDataDictionaryElement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getWorkflowDataDictionaryDefinitionAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleWorkflowDataDictionaryElement
entryRuleWorkflowDataDictionaryElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWorkflowDataDictionaryElementRule()); }
	iv_ruleWorkflowDataDictionaryElement=ruleWorkflowDataDictionaryElement
	{ $current=$iv_ruleWorkflowDataDictionaryElement.current; }
	EOF;

// Rule WorkflowDataDictionaryElement
ruleWorkflowDataDictionaryElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='data'
		{
			newLeafNode(otherlv_0, grammarAccess.getWorkflowDataDictionaryElementAccess().getDataKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getWorkflowDataDictionaryElementAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getWorkflowDataDictionaryElementRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"de.mindscan.ai.aidsl.AiDsl.ID");
				}
			)
		)
		(
			otherlv_2='extends'
			{
				newLeafNode(otherlv_2, grammarAccess.getWorkflowDataDictionaryElementAccess().getExtendsKeyword_2_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getWorkflowDataDictionaryElementRule());
						}
					}
					otherlv_3=RULE_ID
					{
						newLeafNode(otherlv_3, grammarAccess.getWorkflowDataDictionaryElementAccess().getExtendsWorkflowDataDictionaryElementCrossReference_2_1_0());
					}
				)
			)
		)?
		otherlv_4='{'
		{
			newLeafNode(otherlv_4, grammarAccess.getWorkflowDataDictionaryElementAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWorkflowDataDictionaryElementAccess().getKeyValuePairsDatadictionaryKeyValuePairParserRuleCall_4_0());
				}
				lv_keyValuePairs_5_0=ruleDatadictionaryKeyValuePair
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWorkflowDataDictionaryElementRule());
					}
					add(
						$current,
						"keyValuePairs",
						lv_keyValuePairs_5_0,
						"de.mindscan.ai.aidsl.AiDsl.DatadictionaryKeyValuePair");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getWorkflowDataDictionaryElementAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleDatadictionaryKeyValuePair
entryRuleDatadictionaryKeyValuePair returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDatadictionaryKeyValuePairRule()); }
	iv_ruleDatadictionaryKeyValuePair=ruleDatadictionaryKeyValuePair
	{ $current=$iv_ruleDatadictionaryKeyValuePair.current; }
	EOF;

// Rule DatadictionaryKeyValuePair
ruleDatadictionaryKeyValuePair returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_key_0_0=RULE_ID
				{
					newLeafNode(lv_key_0_0, grammarAccess.getDatadictionaryKeyValuePairAccess().getKeyIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDatadictionaryKeyValuePairRule());
					}
					setWithLastConsumed(
						$current,
						"key",
						lv_key_0_0,
						"de.mindscan.ai.aidsl.AiDsl.ID");
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getDatadictionaryKeyValuePairAccess().getColonKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getDatadictionaryKeyValuePairAccess().getValueDataDictionaryBooleanValueParserRuleCall_2_0_0());
					}
					lv_value_2_1=ruleDataDictionaryBooleanValue
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDatadictionaryKeyValuePairRule());
						}
						set(
							$current,
							"value",
							lv_value_2_1,
							"de.mindscan.ai.aidsl.AiDsl.DataDictionaryBooleanValue");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getDatadictionaryKeyValuePairAccess().getValueDataDictionaryStringValueParserRuleCall_2_0_1());
					}
					lv_value_2_2=ruleDataDictionaryStringValue
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDatadictionaryKeyValuePairRule());
						}
						set(
							$current,
							"value",
							lv_value_2_2,
							"de.mindscan.ai.aidsl.AiDsl.DataDictionaryStringValue");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getDatadictionaryKeyValuePairAccess().getValueDataDictionaryNullValueParserRuleCall_2_0_2());
					}
					lv_value_2_3=ruleDataDictionaryNullValue
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDatadictionaryKeyValuePairRule());
						}
						set(
							$current,
							"value",
							lv_value_2_3,
							"de.mindscan.ai.aidsl.AiDsl.DataDictionaryNullValue");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleDataDictionaryBooleanValue
entryRuleDataDictionaryBooleanValue returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDataDictionaryBooleanValueRule()); }
	iv_ruleDataDictionaryBooleanValue=ruleDataDictionaryBooleanValue
	{ $current=$iv_ruleDataDictionaryBooleanValue.current.getText(); }
	EOF;

// Rule DataDictionaryBooleanValue
ruleDataDictionaryBooleanValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='true'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDataDictionaryBooleanValueAccess().getTrueKeyword_0());
		}
		    |
		kw='false'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDataDictionaryBooleanValueAccess().getFalseKeyword_1());
		}
	)
;

// Entry rule entryRuleDataDictionaryStringValue
entryRuleDataDictionaryStringValue returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDataDictionaryStringValueRule()); }
	iv_ruleDataDictionaryStringValue=ruleDataDictionaryStringValue
	{ $current=$iv_ruleDataDictionaryStringValue.current.getText(); }
	EOF;

// Rule DataDictionaryStringValue
ruleDataDictionaryStringValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_STRING_0=RULE_STRING
	{
		$current.merge(this_STRING_0);
	}
	{
		newLeafNode(this_STRING_0, grammarAccess.getDataDictionaryStringValueAccess().getSTRINGTerminalRuleCall());
	}
;

// Entry rule entryRuleDataDictionaryNullValue
entryRuleDataDictionaryNullValue returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDataDictionaryNullValueRule()); }
	iv_ruleDataDictionaryNullValue=ruleDataDictionaryNullValue
	{ $current=$iv_ruleDataDictionaryNullValue.current.getText(); }
	EOF;

// Rule DataDictionaryNullValue
ruleDataDictionaryNullValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='null'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getDataDictionaryNullValueAccess().getNullKeyword());
	}
;

// Entry rule entryRuleVMNodeDefinition
entryRuleVMNodeDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVMNodeDefinitionRule()); }
	iv_ruleVMNodeDefinition=ruleVMNodeDefinition
	{ $current=$iv_ruleVMNodeDefinition.current; }
	EOF;

// Rule VMNodeDefinition
ruleVMNodeDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='vmnode'
		{
			newLeafNode(otherlv_0, grammarAccess.getVMNodeDefinitionAccess().getVmnodeKeyword_0());
		}
		(
			(
				(
					lv_nodetype_1_1='super'
					{
						newLeafNode(lv_nodetype_1_1, grammarAccess.getVMNodeDefinitionAccess().getNodetypeSuperKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVMNodeDefinitionRule());
						}
						setWithLastConsumed($current, "nodetype", lv_nodetype_1_1, null);
					}
					    |
					lv_nodetype_1_2='overlay'
					{
						newLeafNode(lv_nodetype_1_2, grammarAccess.getVMNodeDefinitionAccess().getNodetypeOverlayKeyword_1_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVMNodeDefinitionRule());
						}
						setWithLastConsumed($current, "nodetype", lv_nodetype_1_2, null);
					}
				)
			)
		)?
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getVMNodeDefinitionAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVMNodeDefinitionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"de.mindscan.ai.aidsl.AiDsl.ID");
				}
			)
		)
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getVMNodeDefinitionAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVMNodeDefinitionAccess().getElementsVMNodeEleemntsParserRuleCall_4_0());
				}
				lv_elements_4_0=ruleVMNodeEleemnts
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVMNodeDefinitionRule());
					}
					add(
						$current,
						"elements",
						lv_elements_4_0,
						"de.mindscan.ai.aidsl.AiDsl.VMNodeEleemnts");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getVMNodeDefinitionAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleVMNodeEleemnts
entryRuleVMNodeEleemnts returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVMNodeEleemntsRule()); }
	iv_ruleVMNodeEleemnts=ruleVMNodeEleemnts
	{ $current=$iv_ruleVMNodeEleemnts.current; }
	EOF;

// Rule VMNodeEleemnts
ruleVMNodeEleemnts returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getVMNodeEleemntsAccess().getVMNodeOpCodeElementParserRuleCall_0());
		}
		this_VMNodeOpCodeElement_0=ruleVMNodeOpCodeElement
		{
			$current = $this_VMNodeOpCodeElement_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getVMNodeEleemntsAccess().getVMNodeOutElementsParserRuleCall_1());
		}
		this_VMNodeOutElements_1=ruleVMNodeOutElements
		{
			$current = $this_VMNodeOutElements_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getVMNodeEleemntsAccess().getVMNodeInElementsParserRuleCall_2());
		}
		this_VMNodeInElements_2=ruleVMNodeInElements
		{
			$current = $this_VMNodeInElements_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getVMNodeEleemntsAccess().getVMNodeFieldElementsParserRuleCall_3());
		}
		this_VMNodeFieldElements_3=ruleVMNodeFieldElements
		{
			$current = $this_VMNodeFieldElements_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleVMNodeOpCodeElement
entryRuleVMNodeOpCodeElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVMNodeOpCodeElementRule()); }
	iv_ruleVMNodeOpCodeElement=ruleVMNodeOpCodeElement
	{ $current=$iv_ruleVMNodeOpCodeElement.current; }
	EOF;

// Rule VMNodeOpCodeElement
ruleVMNodeOpCodeElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='opcode'
		{
			newLeafNode(otherlv_0, grammarAccess.getVMNodeOpCodeElementAccess().getOpcodeKeyword_0());
		}
		(
			(
				lv_opcode_1_0=RULE_STRING
				{
					newLeafNode(lv_opcode_1_0, grammarAccess.getVMNodeOpCodeElementAccess().getOpcodeSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVMNodeOpCodeElementRule());
					}
					setWithLastConsumed(
						$current,
						"opcode",
						lv_opcode_1_0,
						"de.mindscan.ai.aidsl.AiDsl.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleVMNodeOutElements
entryRuleVMNodeOutElements returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVMNodeOutElementsRule()); }
	iv_ruleVMNodeOutElements=ruleVMNodeOutElements
	{ $current=$iv_ruleVMNodeOutElements.current; }
	EOF;

// Rule VMNodeOutElements
ruleVMNodeOutElements returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getVMNodeOutElementsAccess().getVMNodeOutElementsAction_0(),
					$current);
			}
		)
		otherlv_1='out'
		{
			newLeafNode(otherlv_1, grammarAccess.getVMNodeOutElementsAccess().getOutKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getVMNodeOutElementsAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVMNodeOutElementsAccess().getOutElementsVMNodeOutElementParserRuleCall_3_0());
				}
				lv_outElements_3_0=ruleVMNodeOutElement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVMNodeOutElementsRule());
					}
					add(
						$current,
						"outElements",
						lv_outElements_3_0,
						"de.mindscan.ai.aidsl.AiDsl.VMNodeOutElement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getVMNodeOutElementsAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleVMNodeInElements
entryRuleVMNodeInElements returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVMNodeInElementsRule()); }
	iv_ruleVMNodeInElements=ruleVMNodeInElements
	{ $current=$iv_ruleVMNodeInElements.current; }
	EOF;

// Rule VMNodeInElements
ruleVMNodeInElements returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getVMNodeInElementsAccess().getVMNodeInElementsAction_0(),
					$current);
			}
		)
		otherlv_1='in'
		{
			newLeafNode(otherlv_1, grammarAccess.getVMNodeInElementsAccess().getInKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getVMNodeInElementsAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVMNodeInElementsAccess().getInElementsVMNodeInElementParserRuleCall_3_0());
				}
				lv_inElements_3_0=ruleVMNodeInElement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVMNodeInElementsRule());
					}
					add(
						$current,
						"inElements",
						lv_inElements_3_0,
						"de.mindscan.ai.aidsl.AiDsl.VMNodeInElement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getVMNodeInElementsAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleVMNodeFieldElements
entryRuleVMNodeFieldElements returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVMNodeFieldElementsRule()); }
	iv_ruleVMNodeFieldElements=ruleVMNodeFieldElements
	{ $current=$iv_ruleVMNodeFieldElements.current; }
	EOF;

// Rule VMNodeFieldElements
ruleVMNodeFieldElements returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getVMNodeFieldElementsAccess().getVMNodeFieldElementsAction_0(),
					$current);
			}
		)
		otherlv_1='fields'
		{
			newLeafNode(otherlv_1, grammarAccess.getVMNodeFieldElementsAccess().getFieldsKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getVMNodeFieldElementsAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getVMNodeFieldElementsAccess().getFieldELementsVMFieldElementParserRuleCall_3_0_0());
					}
					lv_fieldELements_3_1=ruleVMFieldElement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVMNodeFieldElementsRule());
						}
						add(
							$current,
							"fieldELements",
							lv_fieldELements_3_1,
							"de.mindscan.ai.aidsl.AiDsl.VMFieldElement");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getVMNodeFieldElementsAccess().getFieldELementsVMOverrideFieldElementParserRuleCall_3_0_1());
					}
					lv_fieldELements_3_2=ruleVMOverrideFieldElement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVMNodeFieldElementsRule());
						}
						add(
							$current,
							"fieldELements",
							lv_fieldELements_3_2,
							"de.mindscan.ai.aidsl.AiDsl.VMOverrideFieldElement");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getVMNodeFieldElementsAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleVMNodeOutElement
entryRuleVMNodeOutElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVMNodeOutElementRule()); }
	iv_ruleVMNodeOutElement=ruleVMNodeOutElement
	{ $current=$iv_ruleVMNodeOutElement.current; }
	EOF;

// Rule VMNodeOutElement
ruleVMNodeOutElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getVMNodeOutElementAccess().getNameQualifiedNameParserRuleCall_0_0());
				}
				lv_name_0_0=ruleQualifiedName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVMNodeOutElementRule());
					}
					set(
						$current,
						"name",
						lv_name_0_0,
						"de.mindscan.ai.aidsl.AiDsl.QualifiedName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='as'
		{
			newLeafNode(otherlv_1, grammarAccess.getVMNodeOutElementAccess().getAsKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVMNodeOutElementAccess().getTypeELEMENTTYPEParserRuleCall_2_0());
				}
				lv_type_2_0=ruleELEMENTTYPE
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVMNodeOutElementRule());
					}
					set(
						$current,
						"type",
						lv_type_2_0,
						"de.mindscan.ai.aidsl.AiDsl.ELEMENTTYPE");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					lv_hasrequire_3_0='require'
					{
						newLeafNode(lv_hasrequire_3_0, grammarAccess.getVMNodeOutElementAccess().getHasrequireRequireKeyword_3_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVMNodeOutElementRule());
						}
						setWithLastConsumed($current, "hasrequire", lv_hasrequire_3_0 != null, "require");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getVMNodeOutElementAccess().getInputreferenceQualifiedNameParserRuleCall_3_1_0());
					}
					lv_inputreference_4_0=ruleQualifiedName
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVMNodeOutElementRule());
						}
						set(
							$current,
							"inputreference",
							lv_inputreference_4_0,
							"de.mindscan.ai.aidsl.AiDsl.QualifiedName");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleVMNodeInElement
entryRuleVMNodeInElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVMNodeInElementRule()); }
	iv_ruleVMNodeInElement=ruleVMNodeInElement
	{ $current=$iv_ruleVMNodeInElement.current; }
	EOF;

// Rule VMNodeInElement
ruleVMNodeInElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_policy_0_1='require'
					{
						newLeafNode(lv_policy_0_1, grammarAccess.getVMNodeInElementAccess().getPolicyRequireKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVMNodeInElementRule());
						}
						setWithLastConsumed($current, "policy", lv_policy_0_1, null);
					}
					    |
					lv_policy_0_2='optional'
					{
						newLeafNode(lv_policy_0_2, grammarAccess.getVMNodeInElementAccess().getPolicyOptionalKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVMNodeInElementRule());
						}
						setWithLastConsumed($current, "policy", lv_policy_0_2, null);
					}
				)
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getVMNodeInElementAccess().getNameQualifiedNameParserRuleCall_1_0());
				}
				lv_name_1_0=ruleQualifiedName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVMNodeInElementRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"de.mindscan.ai.aidsl.AiDsl.QualifiedName");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleVMFieldElement
entryRuleVMFieldElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVMFieldElementRule()); }
	iv_ruleVMFieldElement=ruleVMFieldElement
	{ $current=$iv_ruleVMFieldElement.current; }
	EOF;

// Rule VMFieldElement
ruleVMFieldElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_policy_0_1='require'
					{
						newLeafNode(lv_policy_0_1, grammarAccess.getVMFieldElementAccess().getPolicyRequireKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVMFieldElementRule());
						}
						setWithLastConsumed($current, "policy", lv_policy_0_1, null);
					}
					    |
					lv_policy_0_2='optional'
					{
						newLeafNode(lv_policy_0_2, grammarAccess.getVMFieldElementAccess().getPolicyOptionalKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVMFieldElementRule());
						}
						setWithLastConsumed($current, "policy", lv_policy_0_2, null);
					}
				)
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getVMFieldElementAccess().getTypeELEMENTTYPEParserRuleCall_1_0());
				}
				lv_type_1_0=ruleELEMENTTYPE
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVMFieldElementRule());
					}
					set(
						$current,
						"type",
						lv_type_1_0,
						"de.mindscan.ai.aidsl.AiDsl.ELEMENTTYPE");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getVMFieldElementAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVMFieldElementRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"de.mindscan.ai.aidsl.AiDsl.ID");
				}
			)
		)
		(
			otherlv_3='default'
			{
				newLeafNode(otherlv_3, grammarAccess.getVMFieldElementAccess().getDefaultKeyword_3_0());
			}
			(
				(
					lv_defaultvalue_4_0=RULE_STRING
					{
						newLeafNode(lv_defaultvalue_4_0, grammarAccess.getVMFieldElementAccess().getDefaultvalueSTRINGTerminalRuleCall_3_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVMFieldElementRule());
						}
						setWithLastConsumed(
							$current,
							"defaultvalue",
							lv_defaultvalue_4_0,
							"de.mindscan.ai.aidsl.AiDsl.STRING");
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleVMOverrideFieldElement
entryRuleVMOverrideFieldElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVMOverrideFieldElementRule()); }
	iv_ruleVMOverrideFieldElement=ruleVMOverrideFieldElement
	{ $current=$iv_ruleVMOverrideFieldElement.current; }
	EOF;

// Rule VMOverrideFieldElement
ruleVMOverrideFieldElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_policy_0_0='override'
				{
					newLeafNode(lv_policy_0_0, grammarAccess.getVMOverrideFieldElementAccess().getPolicyOverrideKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVMOverrideFieldElementRule());
					}
					setWithLastConsumed($current, "policy", lv_policy_0_0, "override");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getVMOverrideFieldElementAccess().getTypeELEMENTTYPEParserRuleCall_1_0());
				}
				lv_type_1_0=ruleELEMENTTYPE
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVMOverrideFieldElementRule());
					}
					set(
						$current,
						"type",
						lv_type_1_0,
						"de.mindscan.ai.aidsl.AiDsl.ELEMENTTYPE");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getVMOverrideFieldElementAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVMOverrideFieldElementRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"de.mindscan.ai.aidsl.AiDsl.ID");
				}
			)
		)
		otherlv_3=':='
		{
			newLeafNode(otherlv_3, grammarAccess.getVMOverrideFieldElementAccess().getColonEqualsSignKeyword_3());
		}
		(
			(
				lv_defaultvalue_4_0=RULE_STRING
				{
					newLeafNode(lv_defaultvalue_4_0, grammarAccess.getVMOverrideFieldElementAccess().getDefaultvalueSTRINGTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVMOverrideFieldElementRule());
					}
					setWithLastConsumed(
						$current,
						"defaultvalue",
						lv_defaultvalue_4_0,
						"de.mindscan.ai.aidsl.AiDsl.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleLlmTaskDefinition
entryRuleLlmTaskDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLlmTaskDefinitionRule()); }
	iv_ruleLlmTaskDefinition=ruleLlmTaskDefinition
	{ $current=$iv_ruleLlmTaskDefinition.current; }
	EOF;

// Rule LlmTaskDefinition
ruleLlmTaskDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='llmtask'
		{
			newLeafNode(otherlv_0, grammarAccess.getLlmTaskDefinitionAccess().getLlmtaskKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getLlmTaskDefinitionAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLlmTaskDefinitionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"de.mindscan.ai.aidsl.AiDsl.ID");
				}
			)
		)
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getLlmTaskDefinitionAccess().getLeftParenthesisKeyword_2());
		}
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getLlmTaskDefinitionAccess().getRightParenthesisKeyword_3());
		}
		(
			otherlv_4='implements'
			{
				newLeafNode(otherlv_4, grammarAccess.getLlmTaskDefinitionAccess().getImplementsKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getLlmTaskDefinitionAccess().getAnnotation_interfacesAnnotationInterfaceReferenceParserRuleCall_4_1_0());
					}
					lv_annotation_interfaces_5_0=ruleAnnotationInterfaceReference
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLlmTaskDefinitionRule());
						}
						add(
							$current,
							"annotation_interfaces",
							lv_annotation_interfaces_5_0,
							"de.mindscan.ai.aidsl.AiDsl.AnnotationInterfaceReference");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_6=','
				{
					newLeafNode(otherlv_6, grammarAccess.getLlmTaskDefinitionAccess().getCommaKeyword_4_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getLlmTaskDefinitionAccess().getAnnotation_interfacesAnnotationInterfaceReferenceParserRuleCall_4_2_1_0());
						}
						lv_annotation_interfaces_7_0=ruleAnnotationInterfaceReference
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getLlmTaskDefinitionRule());
							}
							add(
								$current,
								"annotation_interfaces",
								lv_annotation_interfaces_7_0,
								"de.mindscan.ai.aidsl.AiDsl.AnnotationInterfaceReference");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_8='{'
		{
			newLeafNode(otherlv_8, grammarAccess.getLlmTaskDefinitionAccess().getLeftCurlyBracketKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLlmTaskDefinitionAccess().getAssignmentsLlmVariableAssignmentParserRuleCall_6_0());
				}
				lv_assignments_9_0=ruleLlmVariableAssignment
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLlmTaskDefinitionRule());
					}
					add(
						$current,
						"assignments",
						lv_assignments_9_0,
						"de.mindscan.ai.aidsl.AiDsl.LlmVariableAssignment");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_10='}'
		{
			newLeafNode(otherlv_10, grammarAccess.getLlmTaskDefinitionAccess().getRightCurlyBracketKeyword_7());
		}
	)
;

// Entry rule entryRuleAnnotationInterfaceReference
entryRuleAnnotationInterfaceReference returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}:
	{ newCompositeNode(grammarAccess.getAnnotationInterfaceReferenceRule()); }
	iv_ruleAnnotationInterfaceReference=ruleAnnotationInterfaceReference
	{ $current=$iv_ruleAnnotationInterfaceReference.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule AnnotationInterfaceReference
ruleAnnotationInterfaceReference returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='@'
		{
			newLeafNode(otherlv_0, grammarAccess.getAnnotationInterfaceReferenceAccess().getCommercialAtKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAnnotationInterfaceReferenceRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getAnnotationInterfaceReferenceAccess().getNameVMNodeDefinitionCrossReference_1_0());
				}
			)
		)
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleLlmVariableAssignment
entryRuleLlmVariableAssignment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLlmVariableAssignmentRule()); }
	iv_ruleLlmVariableAssignment=ruleLlmVariableAssignment
	{ $current=$iv_ruleLlmVariableAssignment.current; }
	EOF;

// Rule LlmVariableAssignment
ruleLlmVariableAssignment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_variablename_0_0=RULE_ID
				{
					newLeafNode(lv_variablename_0_0, grammarAccess.getLlmVariableAssignmentAccess().getVariablenameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLlmVariableAssignmentRule());
					}
					setWithLastConsumed(
						$current,
						"variablename",
						lv_variablename_0_0,
						"de.mindscan.ai.aidsl.AiDsl.ID");
				}
			)
		)
		otherlv_1=':='
		{
			newLeafNode(otherlv_1, grammarAccess.getLlmVariableAssignmentAccess().getColonEqualsSignKeyword_1());
		}
		(
			(
				lv_template_2_0=RULE_STRING
				{
					newLeafNode(lv_template_2_0, grammarAccess.getLlmVariableAssignmentAccess().getTemplateSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLlmVariableAssignmentRule());
					}
					setWithLastConsumed(
						$current,
						"template",
						lv_template_2_0,
						"de.mindscan.ai.aidsl.AiDsl.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleWorkflowDefinition
entryRuleWorkflowDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWorkflowDefinitionRule()); }
	iv_ruleWorkflowDefinition=ruleWorkflowDefinition
	{ $current=$iv_ruleWorkflowDefinition.current; }
	EOF;

// Rule WorkflowDefinition
ruleWorkflowDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='workflow'
		{
			newLeafNode(otherlv_0, grammarAccess.getWorkflowDefinitionAccess().getWorkflowKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getWorkflowDefinitionAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getWorkflowDefinitionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"de.mindscan.ai.aidsl.AiDsl.ID");
				}
			)
		)
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getWorkflowDefinitionAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getWorkflowDefinitionRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getWorkflowDefinitionAccess().getInputWorkflowInputDefinitionCrossReference_3_0());
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getWorkflowDefinitionAccess().getRightParenthesisKeyword_4());
		}
		otherlv_5='{'
		{
			newLeafNode(otherlv_5, grammarAccess.getWorkflowDefinitionAccess().getLeftCurlyBracketKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWorkflowDefinitionAccess().getStatementsWorkflowDefinitionApplyLLMTaskStatementParserRuleCall_6_0());
				}
				lv_statements_6_0=ruleWorkflowDefinitionApplyLLMTaskStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWorkflowDefinitionRule());
					}
					add(
						$current,
						"statements",
						lv_statements_6_0,
						"de.mindscan.ai.aidsl.AiDsl.WorkflowDefinitionApplyLLMTaskStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getWorkflowDefinitionAccess().getRightCurlyBracketKeyword_7());
		}
	)
;

// Entry rule entryRuleWorkflowDefinitionApplyLLMTaskStatement
entryRuleWorkflowDefinitionApplyLLMTaskStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWorkflowDefinitionApplyLLMTaskStatementRule()); }
	iv_ruleWorkflowDefinitionApplyLLMTaskStatement=ruleWorkflowDefinitionApplyLLMTaskStatement
	{ $current=$iv_ruleWorkflowDefinitionApplyLLMTaskStatement.current; }
	EOF;

// Rule WorkflowDefinitionApplyLLMTaskStatement
ruleWorkflowDefinitionApplyLLMTaskStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getWorkflowDefinitionApplyLLMTaskStatementRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getWorkflowDefinitionApplyLLMTaskStatementAccess().getLlmtaskLlmTaskDefinitionCrossReference_0_0());
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getWorkflowDefinitionApplyLLMTaskStatementAccess().getLeftParenthesisKeyword_1());
		}
		otherlv_2=')'
		{
			newLeafNode(otherlv_2, grammarAccess.getWorkflowDefinitionApplyLLMTaskStatementAccess().getRightParenthesisKeyword_2());
		}
		(
			otherlv_3='=>'
			{
				newLeafNode(otherlv_3, grammarAccess.getWorkflowDefinitionApplyLLMTaskStatementAccess().getEqualsSignGreaterThanSignKeyword_3_0());
			}
			otherlv_4='{'
			{
				newLeafNode(otherlv_4, grammarAccess.getWorkflowDefinitionApplyLLMTaskStatementAccess().getLeftCurlyBracketKeyword_3_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getWorkflowDefinitionApplyLLMTaskStatementAccess().getNoderesultassigmentsWorkflowDefinitionApplyLLMNodeResultAssignmentParserRuleCall_3_2_0());
					}
					lv_noderesultassigments_5_0=ruleWorkflowDefinitionApplyLLMNodeResultAssignment
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getWorkflowDefinitionApplyLLMTaskStatementRule());
						}
						add(
							$current,
							"noderesultassigments",
							lv_noderesultassigments_5_0,
							"de.mindscan.ai.aidsl.AiDsl.WorkflowDefinitionApplyLLMNodeResultAssignment");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			otherlv_6='}'
			{
				newLeafNode(otherlv_6, grammarAccess.getWorkflowDefinitionApplyLLMTaskStatementAccess().getRightCurlyBracketKeyword_3_3());
			}
		)?
		otherlv_7=';'
		{
			newLeafNode(otherlv_7, grammarAccess.getWorkflowDefinitionApplyLLMTaskStatementAccess().getSemicolonKeyword_4());
		}
	)
;

// Entry rule entryRuleWorkflowDefinitionApplyLLMNodeResultAssignment
entryRuleWorkflowDefinitionApplyLLMNodeResultAssignment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWorkflowDefinitionApplyLLMNodeResultAssignmentRule()); }
	iv_ruleWorkflowDefinitionApplyLLMNodeResultAssignment=ruleWorkflowDefinitionApplyLLMNodeResultAssignment
	{ $current=$iv_ruleWorkflowDefinitionApplyLLMNodeResultAssignment.current; }
	EOF;

// Rule WorkflowDefinitionApplyLLMNodeResultAssignment
ruleWorkflowDefinitionApplyLLMNodeResultAssignment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getWorkflowDefinitionApplyLLMNodeResultAssignmentAccess().getEnvironmentresultnameQualifiedNameParserRuleCall_0_0());
				}
				lv_environmentresultname_0_0=ruleQualifiedName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWorkflowDefinitionApplyLLMNodeResultAssignmentRule());
					}
					set(
						$current,
						"environmentresultname",
						lv_environmentresultname_0_0,
						"de.mindscan.ai.aidsl.AiDsl.QualifiedName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getWorkflowDefinitionApplyLLMNodeResultAssignmentAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWorkflowDefinitionApplyLLMNodeResultAssignmentAccess().getNoderesultnameQualifiedNameParserRuleCall_2_0());
				}
				lv_noderesultname_2_0=ruleQualifiedName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWorkflowDefinitionApplyLLMNodeResultAssignmentRule());
					}
					set(
						$current,
						"noderesultname",
						lv_noderesultname_2_0,
						"de.mindscan.ai.aidsl.AiDsl.QualifiedName");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); }
	iv_ruleQualifiedName=ruleQualifiedName
	{ $current=$iv_ruleQualifiedName.current.getText(); }
	EOF;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0());
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0());
			}
			this_ID_2=RULE_ID
			{
				$current.merge(this_ID_2);
			}
			{
				newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1());
			}
		)*
	)
;

// Entry rule entryRuleQualifiedNameWithWildcard
entryRuleQualifiedNameWithWildcard returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQualifiedNameWithWildcardRule()); }
	iv_ruleQualifiedNameWithWildcard=ruleQualifiedNameWithWildcard
	{ $current=$iv_ruleQualifiedNameWithWildcard.current.getText(); }
	EOF;

// Rule QualifiedNameWithWildcard
ruleQualifiedNameWithWildcard returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getQualifiedNameWithWildcardAccess().getQualifiedNameParserRuleCall_0());
		}
		this_QualifiedName_0=ruleQualifiedName
		{
			$current.merge(this_QualifiedName_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			kw='.*'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getQualifiedNameWithWildcardAccess().getFullStopAsteriskKeyword_1());
			}
		)?
	)
;

// Entry rule entryRuleELEMENTTYPE
entryRuleELEMENTTYPE returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getELEMENTTYPERule()); }
	iv_ruleELEMENTTYPE=ruleELEMENTTYPE
	{ $current=$iv_ruleELEMENTTYPE.current; }
	EOF;

// Rule ELEMENTTYPE
ruleELEMENTTYPE returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getELEMENTTYPEAccess().getBASICTYPEParserRuleCall());
	}
	this_BASICTYPE_0=ruleBASICTYPE
	{
		$current = $this_BASICTYPE_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleBASICTYPE
entryRuleBASICTYPE returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBASICTYPERule()); }
	iv_ruleBASICTYPE=ruleBASICTYPE
	{ $current=$iv_ruleBASICTYPE.current; }
	EOF;

// Rule BASICTYPE
ruleBASICTYPE returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_typename_0_1='string'
				{
					newLeafNode(lv_typename_0_1, grammarAccess.getBASICTYPEAccess().getTypenameStringKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBASICTYPERule());
					}
					setWithLastConsumed($current, "typename", lv_typename_0_1, null);
				}
				    |
				lv_typename_0_2='int'
				{
					newLeafNode(lv_typename_0_2, grammarAccess.getBASICTYPEAccess().getTypenameIntKeyword_0_1());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBASICTYPERule());
					}
					setWithLastConsumed($current, "typename", lv_typename_0_2, null);
				}
				    |
				lv_typename_0_3='boolean'
				{
					newLeafNode(lv_typename_0_3, grammarAccess.getBASICTYPEAccess().getTypenameBooleanKeyword_0_2());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBASICTYPERule());
					}
					setWithLastConsumed($current, "typename", lv_typename_0_3, null);
				}
				    |
				lv_typename_0_4='jsonstring'
				{
					newLeafNode(lv_typename_0_4, grammarAccess.getBASICTYPEAccess().getTypenameJsonstringKeyword_0_3());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBASICTYPERule());
					}
					setWithLastConsumed($current, "typename", lv_typename_0_4, null);
				}
			)
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\''|'\'\'\'' ( options {greedy=false;} : . )*'\'\'\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
