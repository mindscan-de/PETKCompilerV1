/*
 * generated by Xtext 2.27.0
 */
package de.mindscan.ai.aidsl.serializer;

import com.google.inject.Inject;
import de.mindscan.ai.aidsl.aiDsl.AiDslPackage;
import de.mindscan.ai.aidsl.aiDsl.AnnotationInterfaceReference;
import de.mindscan.ai.aidsl.aiDsl.ImportDeclaration;
import de.mindscan.ai.aidsl.aiDsl.LlmTaskDefinition;
import de.mindscan.ai.aidsl.aiDsl.LlmVariableAssignment;
import de.mindscan.ai.aidsl.aiDsl.Model;
import de.mindscan.ai.aidsl.aiDsl.PackageDeclaration;
import de.mindscan.ai.aidsl.aiDsl.VMFieldElement;
import de.mindscan.ai.aidsl.aiDsl.VMNodeDefinition;
import de.mindscan.ai.aidsl.aiDsl.VMNodeFieldElements;
import de.mindscan.ai.aidsl.aiDsl.VMNodeInElement;
import de.mindscan.ai.aidsl.aiDsl.VMNodeInElements;
import de.mindscan.ai.aidsl.aiDsl.VMNodeOpCodeElement;
import de.mindscan.ai.aidsl.aiDsl.VMNodeOutElement;
import de.mindscan.ai.aidsl.aiDsl.VMNodeOutElements;
import de.mindscan.ai.aidsl.aiDsl.VMOverrideFieldElement;
import de.mindscan.ai.aidsl.aiDsl.WorkflowDataDictionaryDefinition;
import de.mindscan.ai.aidsl.aiDsl.WorkflowDataDictionaryElement;
import de.mindscan.ai.aidsl.aiDsl.WorkflowDefinition;
import de.mindscan.ai.aidsl.aiDsl.WorkflowDefinitionApplyLLMTaskStatement;
import de.mindscan.ai.aidsl.services.AiDslGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class AiDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private AiDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == AiDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case AiDslPackage.ANNOTATION_INTERFACE_REFERENCE:
				sequence_AnnotationInterfaceReference(context, (AnnotationInterfaceReference) semanticObject); 
				return; 
			case AiDslPackage.IMPORT_DECLARATION:
				sequence_ImportDeclaration(context, (ImportDeclaration) semanticObject); 
				return; 
			case AiDslPackage.LLM_TASK_DEFINITION:
				sequence_LlmTaskDefinition(context, (LlmTaskDefinition) semanticObject); 
				return; 
			case AiDslPackage.LLM_VARIABLE_ASSIGNMENT:
				sequence_LlmVariableAssignment(context, (LlmVariableAssignment) semanticObject); 
				return; 
			case AiDslPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case AiDslPackage.PACKAGE_DECLARATION:
				sequence_PackageDeclaration(context, (PackageDeclaration) semanticObject); 
				return; 
			case AiDslPackage.VM_FIELD_ELEMENT:
				sequence_VMFieldElement(context, (VMFieldElement) semanticObject); 
				return; 
			case AiDslPackage.VM_NODE_DEFINITION:
				sequence_VMNodeDefinition(context, (VMNodeDefinition) semanticObject); 
				return; 
			case AiDslPackage.VM_NODE_FIELD_ELEMENTS:
				sequence_VMNodeFieldElements(context, (VMNodeFieldElements) semanticObject); 
				return; 
			case AiDslPackage.VM_NODE_IN_ELEMENT:
				sequence_VMNodeInElement(context, (VMNodeInElement) semanticObject); 
				return; 
			case AiDslPackage.VM_NODE_IN_ELEMENTS:
				sequence_VMNodeInElements(context, (VMNodeInElements) semanticObject); 
				return; 
			case AiDslPackage.VM_NODE_OP_CODE_ELEMENT:
				sequence_VMNodeOpCodeElement(context, (VMNodeOpCodeElement) semanticObject); 
				return; 
			case AiDslPackage.VM_NODE_OUT_ELEMENT:
				sequence_VMNodeOutElement(context, (VMNodeOutElement) semanticObject); 
				return; 
			case AiDslPackage.VM_NODE_OUT_ELEMENTS:
				sequence_VMNodeOutElements(context, (VMNodeOutElements) semanticObject); 
				return; 
			case AiDslPackage.VM_OVERRIDE_FIELD_ELEMENT:
				sequence_VMOverrideFieldElement(context, (VMOverrideFieldElement) semanticObject); 
				return; 
			case AiDslPackage.WORKFLOW_DATA_DICTIONARY_DEFINITION:
				sequence_WorkflowDataDictionaryDefinition(context, (WorkflowDataDictionaryDefinition) semanticObject); 
				return; 
			case AiDslPackage.WORKFLOW_DATA_DICTIONARY_ELEMENT:
				sequence_WorkflowDataDictionaryElement(context, (WorkflowDataDictionaryElement) semanticObject); 
				return; 
			case AiDslPackage.WORKFLOW_DEFINITION:
				sequence_WorkflowDefinition(context, (WorkflowDefinition) semanticObject); 
				return; 
			case AiDslPackage.WORKFLOW_DEFINITION_APPLY_LLM_TASK_STATEMENT:
				sequence_WorkflowDefinitionApplyLLMTaskStatement(context, (WorkflowDefinitionApplyLLMTaskStatement) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     AnnotationInterfaceReference returns AnnotationInterfaceReference
	 *
	 * Constraint:
	 *     name=[VMNodeDefinition|ID]
	 * </pre>
	 */
	protected void sequence_AnnotationInterfaceReference(ISerializationContext context, AnnotationInterfaceReference semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AiDslPackage.Literals.ANNOTATION_INTERFACE_REFERENCE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AiDslPackage.Literals.ANNOTATION_INTERFACE_REFERENCE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAnnotationInterfaceReferenceAccess().getNameVMNodeDefinitionIDTerminalRuleCall_1_0_1(), semanticObject.eGet(AiDslPackage.Literals.ANNOTATION_INTERFACE_REFERENCE__NAME, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ImportDeclaration returns ImportDeclaration
	 *
	 * Constraint:
	 *     importedNamespace=QualifiedNameWithWildcard
	 * </pre>
	 */
	protected void sequence_ImportDeclaration(ISerializationContext context, ImportDeclaration semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AiDslPackage.Literals.IMPORT_DECLARATION__IMPORTED_NAMESPACE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AiDslPackage.Literals.IMPORT_DECLARATION__IMPORTED_NAMESPACE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getImportDeclarationAccess().getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0(), semanticObject.getImportedNamespace());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     LlmTaskDefinition returns LlmTaskDefinition
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         (annotation_interfaces+=AnnotationInterfaceReference annotation_interfaces+=AnnotationInterfaceReference*)? 
	 *         assignments+=LlmVariableAssignment*
	 *     )
	 * </pre>
	 */
	protected void sequence_LlmTaskDefinition(ISerializationContext context, LlmTaskDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     LlmVariableAssignment returns LlmVariableAssignment
	 *
	 * Constraint:
	 *     (variablename=ID template=STRING)
	 * </pre>
	 */
	protected void sequence_LlmVariableAssignment(ISerializationContext context, LlmVariableAssignment semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AiDslPackage.Literals.LLM_VARIABLE_ASSIGNMENT__VARIABLENAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AiDslPackage.Literals.LLM_VARIABLE_ASSIGNMENT__VARIABLENAME));
			if (transientValues.isValueTransient(semanticObject, AiDslPackage.Literals.LLM_VARIABLE_ASSIGNMENT__TEMPLATE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AiDslPackage.Literals.LLM_VARIABLE_ASSIGNMENT__TEMPLATE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLlmVariableAssignmentAccess().getVariablenameIDTerminalRuleCall_0_0(), semanticObject.getVariablename());
		feeder.accept(grammarAccess.getLlmVariableAssignmentAccess().getTemplateSTRINGTerminalRuleCall_2_0(), semanticObject.getTemplate());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             ((package_declaration=PackageDeclaration import_declarations+=ImportDeclaration+) | import_declarations+=ImportDeclaration+)? 
	 *             (definitions+=WorkflowDefinition | definitions+=WorkflowDataDictionaryDefinition | definitions+=LlmTaskDefinition | definitions+=VMNodeDefinition)+
	 *         ) | 
	 *         (definitions+=WorkflowDefinition | definitions+=WorkflowDataDictionaryDefinition | definitions+=LlmTaskDefinition | definitions+=VMNodeDefinition)+
	 *     )?
	 * </pre>
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     PackageDeclaration returns PackageDeclaration
	 *
	 * Constraint:
	 *     name=QualifiedName
	 * </pre>
	 */
	protected void sequence_PackageDeclaration(ISerializationContext context, PackageDeclaration semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AiDslPackage.Literals.PACKAGE_DECLARATION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AiDslPackage.Literals.PACKAGE_DECLARATION__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPackageDeclarationAccess().getNameQualifiedNameParserRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     VMFieldElement returns VMFieldElement
	 *
	 * Constraint:
	 *     ((policy='require' | policy='optional') type=ID name=ID defaultvalue=STRING?)
	 * </pre>
	 */
	protected void sequence_VMFieldElement(ISerializationContext context, VMFieldElement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     VMNodeDefinition returns VMNodeDefinition
	 *
	 * Constraint:
	 *     ((nodetype='super' | nodetype='overlay')? name=ID elements+=VMNodeEleemnts*)
	 * </pre>
	 */
	protected void sequence_VMNodeDefinition(ISerializationContext context, VMNodeDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     VMNodeEleemnts returns VMNodeFieldElements
	 *     VMNodeFieldElements returns VMNodeFieldElements
	 *
	 * Constraint:
	 *     (fieldELements+=VMFieldElement | fieldELements+=VMOverrideFieldElement)*
	 * </pre>
	 */
	protected void sequence_VMNodeFieldElements(ISerializationContext context, VMNodeFieldElements semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     VMNodeInElement returns VMNodeInElement
	 *
	 * Constraint:
	 *     ((policy='require' | policy='optional')? name=QualifiedName)
	 * </pre>
	 */
	protected void sequence_VMNodeInElement(ISerializationContext context, VMNodeInElement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     VMNodeEleemnts returns VMNodeInElements
	 *     VMNodeInElements returns VMNodeInElements
	 *
	 * Constraint:
	 *     inElements+=VMNodeInElement*
	 * </pre>
	 */
	protected void sequence_VMNodeInElements(ISerializationContext context, VMNodeInElements semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     VMNodeEleemnts returns VMNodeOpCodeElement
	 *     VMNodeOpCodeElement returns VMNodeOpCodeElement
	 *
	 * Constraint:
	 *     opcode=STRING
	 * </pre>
	 */
	protected void sequence_VMNodeOpCodeElement(ISerializationContext context, VMNodeOpCodeElement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AiDslPackage.Literals.VM_NODE_OP_CODE_ELEMENT__OPCODE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AiDslPackage.Literals.VM_NODE_OP_CODE_ELEMENT__OPCODE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVMNodeOpCodeElementAccess().getOpcodeSTRINGTerminalRuleCall_1_0(), semanticObject.getOpcode());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     VMNodeOutElement returns VMNodeOutElement
	 *
	 * Constraint:
	 *     (name=QualifiedName type=ID (hasrequire?='require' inputreference=QualifiedName)?)
	 * </pre>
	 */
	protected void sequence_VMNodeOutElement(ISerializationContext context, VMNodeOutElement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     VMNodeEleemnts returns VMNodeOutElements
	 *     VMNodeOutElements returns VMNodeOutElements
	 *
	 * Constraint:
	 *     outElements+=VMNodeOutElement*
	 * </pre>
	 */
	protected void sequence_VMNodeOutElements(ISerializationContext context, VMNodeOutElements semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     VMOverrideFieldElement returns VMOverrideFieldElement
	 *
	 * Constraint:
	 *     (policy='override' type=ID name=ID defaultvalue=STRING)
	 * </pre>
	 */
	protected void sequence_VMOverrideFieldElement(ISerializationContext context, VMOverrideFieldElement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AiDslPackage.Literals.VM_OVERRIDE_FIELD_ELEMENT__POLICY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AiDslPackage.Literals.VM_OVERRIDE_FIELD_ELEMENT__POLICY));
			if (transientValues.isValueTransient(semanticObject, AiDslPackage.Literals.VM_OVERRIDE_FIELD_ELEMENT__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AiDslPackage.Literals.VM_OVERRIDE_FIELD_ELEMENT__TYPE));
			if (transientValues.isValueTransient(semanticObject, AiDslPackage.Literals.VM_OVERRIDE_FIELD_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AiDslPackage.Literals.VM_OVERRIDE_FIELD_ELEMENT__NAME));
			if (transientValues.isValueTransient(semanticObject, AiDslPackage.Literals.VM_OVERRIDE_FIELD_ELEMENT__DEFAULTVALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AiDslPackage.Literals.VM_OVERRIDE_FIELD_ELEMENT__DEFAULTVALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVMOverrideFieldElementAccess().getPolicyOverrideKeyword_0_0(), semanticObject.getPolicy());
		feeder.accept(grammarAccess.getVMOverrideFieldElementAccess().getTypeIDTerminalRuleCall_1_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getVMOverrideFieldElementAccess().getNameIDTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getVMOverrideFieldElementAccess().getDefaultvalueSTRINGTerminalRuleCall_4_0(), semanticObject.getDefaultvalue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     WorkflowDataDictionaryDefinition returns WorkflowDataDictionaryDefinition
	 *
	 * Constraint:
	 *     dataDictionaryElements+=WorkflowDataDictionaryElement*
	 * </pre>
	 */
	protected void sequence_WorkflowDataDictionaryDefinition(ISerializationContext context, WorkflowDataDictionaryDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     WorkflowDataDictionaryElement returns WorkflowDataDictionaryElement
	 *
	 * Constraint:
	 *     (name=ID (fields+=ID value=STRING)*)
	 * </pre>
	 */
	protected void sequence_WorkflowDataDictionaryElement(ISerializationContext context, WorkflowDataDictionaryElement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     WorkflowDefinitionApplyLLMTaskStatement returns WorkflowDefinitionApplyLLMTaskStatement
	 *
	 * Constraint:
	 *     llmtask=[LlmTaskDefinition|ID]
	 * </pre>
	 */
	protected void sequence_WorkflowDefinitionApplyLLMTaskStatement(ISerializationContext context, WorkflowDefinitionApplyLLMTaskStatement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AiDslPackage.Literals.WORKFLOW_DEFINITION_APPLY_LLM_TASK_STATEMENT__LLMTASK) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AiDslPackage.Literals.WORKFLOW_DEFINITION_APPLY_LLM_TASK_STATEMENT__LLMTASK));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getWorkflowDefinitionApplyLLMTaskStatementAccess().getLlmtaskLlmTaskDefinitionIDTerminalRuleCall_0_0_1(), semanticObject.eGet(AiDslPackage.Literals.WORKFLOW_DEFINITION_APPLY_LLM_TASK_STATEMENT__LLMTASK, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     WorkflowDefinition returns WorkflowDefinition
	 *
	 * Constraint:
	 *     (name=ID statements+=WorkflowDefinitionApplyLLMTaskStatement*)
	 * </pre>
	 */
	protected void sequence_WorkflowDefinition(ISerializationContext context, WorkflowDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
