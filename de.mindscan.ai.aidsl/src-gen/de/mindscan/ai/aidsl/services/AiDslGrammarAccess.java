/*
 * generated by Xtext 2.27.0
 */
package de.mindscan.ai.aidsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class AiDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.mindscan.ai.aidsl.AiDsl.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPackage_declarationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPackage_declarationPackageDeclarationParserRuleCall_0_0 = (RuleCall)cPackage_declarationAssignment_0.eContents().get(0);
		private final Assignment cImport_declarationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImport_declarationsImportDeclarationParserRuleCall_1_0 = (RuleCall)cImport_declarationsAssignment_1.eContents().get(0);
		private final Assignment cDefinitionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cDefinitionsAlternatives_2_0 = (Alternatives)cDefinitionsAssignment_2.eContents().get(0);
		private final RuleCall cDefinitionsWorkflowDefinitionParserRuleCall_2_0_0 = (RuleCall)cDefinitionsAlternatives_2_0.eContents().get(0);
		private final RuleCall cDefinitionsLlmTaskDefinitionParserRuleCall_2_0_1 = (RuleCall)cDefinitionsAlternatives_2_0.eContents().get(1);
		private final RuleCall cDefinitionsVMNodeDefinitionParserRuleCall_2_0_2 = (RuleCall)cDefinitionsAlternatives_2_0.eContents().get(2);
		
		//Model:
		//    (package_declaration=PackageDeclaration)?
		//    (import_declarations+=ImportDeclaration)*
		//    definitions += (WorkflowDefinition|LlmTaskDefinition|VMNodeDefinition)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(package_declaration=PackageDeclaration)?
		//(import_declarations+=ImportDeclaration)*
		//definitions += (WorkflowDefinition|LlmTaskDefinition|VMNodeDefinition)*
		public Group getGroup() { return cGroup; }
		
		//(package_declaration=PackageDeclaration)?
		public Assignment getPackage_declarationAssignment_0() { return cPackage_declarationAssignment_0; }
		
		//PackageDeclaration
		public RuleCall getPackage_declarationPackageDeclarationParserRuleCall_0_0() { return cPackage_declarationPackageDeclarationParserRuleCall_0_0; }
		
		//(import_declarations+=ImportDeclaration)*
		public Assignment getImport_declarationsAssignment_1() { return cImport_declarationsAssignment_1; }
		
		//ImportDeclaration
		public RuleCall getImport_declarationsImportDeclarationParserRuleCall_1_0() { return cImport_declarationsImportDeclarationParserRuleCall_1_0; }
		
		//definitions += (WorkflowDefinition|LlmTaskDefinition|VMNodeDefinition)*
		public Assignment getDefinitionsAssignment_2() { return cDefinitionsAssignment_2; }
		
		//(WorkflowDefinition|LlmTaskDefinition|VMNodeDefinition)
		public Alternatives getDefinitionsAlternatives_2_0() { return cDefinitionsAlternatives_2_0; }
		
		//WorkflowDefinition
		public RuleCall getDefinitionsWorkflowDefinitionParserRuleCall_2_0_0() { return cDefinitionsWorkflowDefinitionParserRuleCall_2_0_0; }
		
		//LlmTaskDefinition
		public RuleCall getDefinitionsLlmTaskDefinitionParserRuleCall_2_0_1() { return cDefinitionsLlmTaskDefinitionParserRuleCall_2_0_1; }
		
		//VMNodeDefinition
		public RuleCall getDefinitionsVMNodeDefinitionParserRuleCall_2_0_2() { return cDefinitionsVMNodeDefinitionParserRuleCall_2_0_2; }
	}
	public class PackageDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.mindscan.ai.aidsl.AiDsl.PackageDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//PackageDeclaration:
		//    'package' name=QualifiedName
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'package' name=QualifiedName
		public Group getGroup() { return cGroup; }
		
		//'package'
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
	}
	public class ImportDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.mindscan.ai.aidsl.AiDsl.ImportDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//ImportDeclaration:
		//    'import' importedNamespace=QualifiedNameWithWildcard
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' importedNamespace=QualifiedNameWithWildcard
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//importedNamespace=QualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }
		
		//QualifiedNameWithWildcard
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0; }
	}
	public class WorkflowDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.mindscan.ai.aidsl.AiDsl.WorkflowDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWorkflowKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//WorkflowDefinition:
		//    'workflow' name=ID '(' ')' '{'
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'workflow' name=ID '(' ')' '{'
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'workflow'
		public Keyword getWorkflowKeyword_0() { return cWorkflowKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class VMNodeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.mindscan.ai.aidsl.AiDsl.VMNodeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVmnodeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNodetypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cNodetypeAlternatives_1_0 = (Alternatives)cNodetypeAssignment_1.eContents().get(0);
		private final Keyword cNodetypeSuperKeyword_1_0_0 = (Keyword)cNodetypeAlternatives_1_0.eContents().get(0);
		private final Keyword cNodetypeOverlayKeyword_1_0_1 = (Keyword)cNodetypeAlternatives_1_0.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cElementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElementsVMNodeEleemntsParserRuleCall_4_0 = (RuleCall)cElementsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//// VMNode stuff
		//VMNodeDefinition:
		//    'vmnode' (nodetype=('super'|'overlay'))? name=ID '{'
		//        (elements+=VMNodeEleemnts)*
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'vmnode' (nodetype=('super'|'overlay'))? name=ID '{'
		//    (elements+=VMNodeEleemnts)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'vmnode'
		public Keyword getVmnodeKeyword_0() { return cVmnodeKeyword_0; }
		
		//(nodetype=('super'|'overlay'))?
		public Assignment getNodetypeAssignment_1() { return cNodetypeAssignment_1; }
		
		//('super'|'overlay')
		public Alternatives getNodetypeAlternatives_1_0() { return cNodetypeAlternatives_1_0; }
		
		//'super'
		public Keyword getNodetypeSuperKeyword_1_0_0() { return cNodetypeSuperKeyword_1_0_0; }
		
		//'overlay'
		public Keyword getNodetypeOverlayKeyword_1_0_1() { return cNodetypeOverlayKeyword_1_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//(elements+=VMNodeEleemnts)*
		public Assignment getElementsAssignment_4() { return cElementsAssignment_4; }
		
		//VMNodeEleemnts
		public RuleCall getElementsVMNodeEleemntsParserRuleCall_4_0() { return cElementsVMNodeEleemntsParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class VMNodeEleemntsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.mindscan.ai.aidsl.AiDsl.VMNodeEleemnts");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVMNodeOpCodeElementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVMNodeOutElementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cVMNodeElementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cVMOverrideElementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//VMNodeEleemnts:
		//    (VMNodeOpCodeElement|VMNodeOutElement|VMNodeElement|VMOverrideElement)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(VMNodeOpCodeElement|VMNodeOutElement|VMNodeElement|VMOverrideElement)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//VMNodeOpCodeElement
		public RuleCall getVMNodeOpCodeElementParserRuleCall_0() { return cVMNodeOpCodeElementParserRuleCall_0; }
		
		//VMNodeOutElement
		public RuleCall getVMNodeOutElementParserRuleCall_1() { return cVMNodeOutElementParserRuleCall_1; }
		
		//VMNodeElement
		public RuleCall getVMNodeElementParserRuleCall_2() { return cVMNodeElementParserRuleCall_2; }
		
		//VMOverrideElement
		public RuleCall getVMOverrideElementParserRuleCall_3() { return cVMOverrideElementParserRuleCall_3; }
	}
	public class VMNodeOpCodeElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.mindscan.ai.aidsl.AiDsl.VMNodeOpCodeElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOpcodeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCodeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCodeSTRINGTerminalRuleCall_1_0 = (RuleCall)cCodeAssignment_1.eContents().get(0);
		
		//VMNodeOpCodeElement:
		//    'opcode' code=STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'opcode' code=STRING
		public Group getGroup() { return cGroup; }
		
		//'opcode'
		public Keyword getOpcodeKeyword_0() { return cOpcodeKeyword_0; }
		
		//code=STRING
		public Assignment getCodeAssignment_1() { return cCodeAssignment_1; }
		
		//STRING
		public RuleCall getCodeSTRINGTerminalRuleCall_1_0() { return cCodeSTRINGTerminalRuleCall_1_0; }
	}
	public class VMNodeOutElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.mindscan.ai.aidsl.AiDsl.VMNodeOutElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOutKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cAsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeIDTerminalRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		//VMNodeOutElement:
		//    'out' name=QualifiedName 'as' type=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'out' name=QualifiedName 'as' type=ID
		public Group getGroup() { return cGroup; }
		
		//'out'
		public Keyword getOutKeyword_0() { return cOutKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
		
		//'as'
		public Keyword getAsKeyword_2() { return cAsKeyword_2; }
		
		//type=ID
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//ID
		public RuleCall getTypeIDTerminalRuleCall_3_0() { return cTypeIDTerminalRuleCall_3_0; }
	}
	public class VMNodeElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.mindscan.ai.aidsl.AiDsl.VMNodeElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPolicyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cPolicyAlternatives_0_0 = (Alternatives)cPolicyAssignment_0.eContents().get(0);
		private final Keyword cPolicyRequireKeyword_0_0_0 = (Keyword)cPolicyAlternatives_0_0.eContents().get(0);
		private final Keyword cPolicyOptionalKeyword_0_0_1 = (Keyword)cPolicyAlternatives_0_0.eContents().get(1);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeIDTerminalRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cDefaultKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDefaultvalueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDefaultvalueSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cDefaultvalueAssignment_3_1.eContents().get(0);
		
		//VMNodeElement:
		//    policy=('require'|'optional') type=ID name=ID ('default' defaultvalue=(STRING))?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//policy=('require'|'optional') type=ID name=ID ('default' defaultvalue=(STRING))?
		public Group getGroup() { return cGroup; }
		
		//policy=('require'|'optional')
		public Assignment getPolicyAssignment_0() { return cPolicyAssignment_0; }
		
		//('require'|'optional')
		public Alternatives getPolicyAlternatives_0_0() { return cPolicyAlternatives_0_0; }
		
		//'require'
		public Keyword getPolicyRequireKeyword_0_0_0() { return cPolicyRequireKeyword_0_0_0; }
		
		//'optional'
		public Keyword getPolicyOptionalKeyword_0_0_1() { return cPolicyOptionalKeyword_0_0_1; }
		
		//type=ID
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//ID
		public RuleCall getTypeIDTerminalRuleCall_1_0() { return cTypeIDTerminalRuleCall_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('default' defaultvalue=(STRING))?
		public Group getGroup_3() { return cGroup_3; }
		
		//'default'
		public Keyword getDefaultKeyword_3_0() { return cDefaultKeyword_3_0; }
		
		//defaultvalue=(STRING)
		public Assignment getDefaultvalueAssignment_3_1() { return cDefaultvalueAssignment_3_1; }
		
		//(STRING)
		public RuleCall getDefaultvalueSTRINGTerminalRuleCall_3_1_0() { return cDefaultvalueSTRINGTerminalRuleCall_3_1_0; }
	}
	public class VMOverrideElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.mindscan.ai.aidsl.AiDsl.VMOverrideElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPolicyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cPolicyOverrideKeyword_0_0 = (Keyword)cPolicyAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeIDTerminalRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDefaultvalueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDefaultvalueSTRINGTerminalRuleCall_4_0 = (RuleCall)cDefaultvalueAssignment_4.eContents().get(0);
		
		//VMOverrideElement:
		//    policy=('override') type=ID name=ID ':=' defaultvalue=(STRING)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//policy=('override') type=ID name=ID ':=' defaultvalue=(STRING)
		public Group getGroup() { return cGroup; }
		
		//policy=('override')
		public Assignment getPolicyAssignment_0() { return cPolicyAssignment_0; }
		
		//('override')
		public Keyword getPolicyOverrideKeyword_0_0() { return cPolicyOverrideKeyword_0_0; }
		
		//type=ID
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//ID
		public RuleCall getTypeIDTerminalRuleCall_1_0() { return cTypeIDTerminalRuleCall_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_3() { return cColonEqualsSignKeyword_3; }
		
		//defaultvalue=(STRING)
		public Assignment getDefaultvalueAssignment_4() { return cDefaultvalueAssignment_4; }
		
		//(STRING)
		public RuleCall getDefaultvalueSTRINGTerminalRuleCall_4_0() { return cDefaultvalueSTRINGTerminalRuleCall_4_0; }
	}
	public class LlmTaskDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.mindscan.ai.aidsl.AiDsl.LlmTaskDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLlmtaskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cImplementsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cAnnotation_interfacesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cAnnotation_interfacesAnnotationInterfaceReferenceParserRuleCall_4_1_0 = (RuleCall)cAnnotation_interfacesAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cAnnotation_interfacesAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cAnnotation_interfacesAnnotationInterfaceReferenceParserRuleCall_4_2_1_0 = (RuleCall)cAnnotation_interfacesAssignment_4_2_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cAssignmentAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cAssignmentLlmVariableAssignmentParserRuleCall_6_0 = (RuleCall)cAssignmentAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//// LLM Task definition
		//LlmTaskDefinition:
		//    'llmtask' name=ID '(' ')' ('implements' annotation_interfaces+=AnnotationInterfaceReference (',' annotation_interfaces+=AnnotationInterfaceReference)* )? '{'
		//        (assignment+=LlmVariableAssignment)*
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'llmtask' name=ID '(' ')' ('implements' annotation_interfaces+=AnnotationInterfaceReference (',' annotation_interfaces+=AnnotationInterfaceReference)* )? '{'
		//    (assignment+=LlmVariableAssignment)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'llmtask'
		public Keyword getLlmtaskKeyword_0() { return cLlmtaskKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//('implements' annotation_interfaces+=AnnotationInterfaceReference (',' annotation_interfaces+=AnnotationInterfaceReference)* )?
		public Group getGroup_4() { return cGroup_4; }
		
		//'implements'
		public Keyword getImplementsKeyword_4_0() { return cImplementsKeyword_4_0; }
		
		//annotation_interfaces+=AnnotationInterfaceReference
		public Assignment getAnnotation_interfacesAssignment_4_1() { return cAnnotation_interfacesAssignment_4_1; }
		
		//AnnotationInterfaceReference
		public RuleCall getAnnotation_interfacesAnnotationInterfaceReferenceParserRuleCall_4_1_0() { return cAnnotation_interfacesAnnotationInterfaceReferenceParserRuleCall_4_1_0; }
		
		//(',' annotation_interfaces+=AnnotationInterfaceReference)*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//','
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }
		
		//annotation_interfaces+=AnnotationInterfaceReference
		public Assignment getAnnotation_interfacesAssignment_4_2_1() { return cAnnotation_interfacesAssignment_4_2_1; }
		
		//AnnotationInterfaceReference
		public RuleCall getAnnotation_interfacesAnnotationInterfaceReferenceParserRuleCall_4_2_1_0() { return cAnnotation_interfacesAnnotationInterfaceReferenceParserRuleCall_4_2_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//(assignment+=LlmVariableAssignment)*
		public Assignment getAssignmentAssignment_6() { return cAssignmentAssignment_6; }
		
		//LlmVariableAssignment
		public RuleCall getAssignmentLlmVariableAssignmentParserRuleCall_6_0() { return cAssignmentLlmVariableAssignmentParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class AnnotationInterfaceReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.mindscan.ai.aidsl.AiDsl.AnnotationInterfaceReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//AnnotationInterfaceReference:
		//    // TODO nowhitespace
		//    '@'name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//// TODO nowhitespace
		//'@'name=ID
		public Group getGroup() { return cGroup; }
		
		//// TODO nowhitespace
		//'@'
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class LlmVariableAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.mindscan.ai.aidsl.AiDsl.LlmVariableAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariablenameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVariablenameIDTerminalRuleCall_0_0 = (RuleCall)cVariablenameAssignment_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTemplateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTemplateSTRINGTerminalRuleCall_2_0 = (RuleCall)cTemplateAssignment_2.eContents().get(0);
		
		//LlmVariableAssignment:
		//    variablename=ID ':=' template=STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//variablename=ID ':=' template=STRING
		public Group getGroup() { return cGroup; }
		
		//variablename=ID
		public Assignment getVariablenameAssignment_0() { return cVariablenameAssignment_0; }
		
		//ID
		public RuleCall getVariablenameIDTerminalRuleCall_0_0() { return cVariablenameIDTerminalRuleCall_0_0; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_1() { return cColonEqualsSignKeyword_1; }
		
		//template=STRING
		public Assignment getTemplateAssignment_2() { return cTemplateAssignment_2; }
		
		//STRING
		public RuleCall getTemplateSTRINGTerminalRuleCall_2_0() { return cTemplateSTRINGTerminalRuleCall_2_0; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.mindscan.ai.aidsl.AiDsl.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//    ID ('.'ID)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.'ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.'ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.mindscan.ai.aidsl.AiDsl.QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//QualifiedNameWithWildcard:
		//    QualifiedName '.*'?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//QualifiedName '.*'?
		public Group getGroup() { return cGroup; }
		
		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }
		
		//'.*'?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}
	
	
	private final ModelElements pModel;
	private final PackageDeclarationElements pPackageDeclaration;
	private final ImportDeclarationElements pImportDeclaration;
	private final WorkflowDefinitionElements pWorkflowDefinition;
	private final VMNodeDefinitionElements pVMNodeDefinition;
	private final VMNodeEleemntsElements pVMNodeEleemnts;
	private final VMNodeOpCodeElementElements pVMNodeOpCodeElement;
	private final VMNodeOutElementElements pVMNodeOutElement;
	private final VMNodeElementElements pVMNodeElement;
	private final VMOverrideElementElements pVMOverrideElement;
	private final LlmTaskDefinitionElements pLlmTaskDefinition;
	private final AnnotationInterfaceReferenceElements pAnnotationInterfaceReference;
	private final LlmVariableAssignmentElements pLlmVariableAssignment;
	private final QualifiedNameElements pQualifiedName;
	private final QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	private final TerminalRule tID;
	private final TerminalRule tINT;
	private final TerminalRule tSTRING;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tWS;
	private final TerminalRule tANY_OTHER;
	
	private final Grammar grammar;

	@Inject
	public AiDslGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pModel = new ModelElements();
		this.pPackageDeclaration = new PackageDeclarationElements();
		this.pImportDeclaration = new ImportDeclarationElements();
		this.pWorkflowDefinition = new WorkflowDefinitionElements();
		this.pVMNodeDefinition = new VMNodeDefinitionElements();
		this.pVMNodeEleemnts = new VMNodeEleemntsElements();
		this.pVMNodeOpCodeElement = new VMNodeOpCodeElementElements();
		this.pVMNodeOutElement = new VMNodeOutElementElements();
		this.pVMNodeElement = new VMNodeElementElements();
		this.pVMOverrideElement = new VMOverrideElementElements();
		this.pLlmTaskDefinition = new LlmTaskDefinitionElements();
		this.pAnnotationInterfaceReference = new AnnotationInterfaceReferenceElements();
		this.pLlmVariableAssignment = new LlmVariableAssignmentElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements();
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.mindscan.ai.aidsl.AiDsl.ID");
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.mindscan.ai.aidsl.AiDsl.INT");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.mindscan.ai.aidsl.AiDsl.STRING");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.mindscan.ai.aidsl.AiDsl.ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.mindscan.ai.aidsl.AiDsl.SL_COMMENT");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.mindscan.ai.aidsl.AiDsl.WS");
		this.tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.mindscan.ai.aidsl.AiDsl.ANY_OTHER");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.mindscan.ai.aidsl.AiDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Model:
	//    (package_declaration=PackageDeclaration)?
	//    (import_declarations+=ImportDeclaration)*
	//    definitions += (WorkflowDefinition|LlmTaskDefinition|VMNodeDefinition)*
	//;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//PackageDeclaration:
	//    'package' name=QualifiedName
	//;
	public PackageDeclarationElements getPackageDeclarationAccess() {
		return pPackageDeclaration;
	}
	
	public ParserRule getPackageDeclarationRule() {
		return getPackageDeclarationAccess().getRule();
	}
	
	//ImportDeclaration:
	//    'import' importedNamespace=QualifiedNameWithWildcard
	//;
	public ImportDeclarationElements getImportDeclarationAccess() {
		return pImportDeclaration;
	}
	
	public ParserRule getImportDeclarationRule() {
		return getImportDeclarationAccess().getRule();
	}
	
	//WorkflowDefinition:
	//    'workflow' name=ID '(' ')' '{'
	//    '}'
	//;
	public WorkflowDefinitionElements getWorkflowDefinitionAccess() {
		return pWorkflowDefinition;
	}
	
	public ParserRule getWorkflowDefinitionRule() {
		return getWorkflowDefinitionAccess().getRule();
	}
	
	//// VMNode stuff
	//VMNodeDefinition:
	//    'vmnode' (nodetype=('super'|'overlay'))? name=ID '{'
	//        (elements+=VMNodeEleemnts)*
	//    '}'
	//;
	public VMNodeDefinitionElements getVMNodeDefinitionAccess() {
		return pVMNodeDefinition;
	}
	
	public ParserRule getVMNodeDefinitionRule() {
		return getVMNodeDefinitionAccess().getRule();
	}
	
	//VMNodeEleemnts:
	//    (VMNodeOpCodeElement|VMNodeOutElement|VMNodeElement|VMOverrideElement)
	//;
	public VMNodeEleemntsElements getVMNodeEleemntsAccess() {
		return pVMNodeEleemnts;
	}
	
	public ParserRule getVMNodeEleemntsRule() {
		return getVMNodeEleemntsAccess().getRule();
	}
	
	//VMNodeOpCodeElement:
	//    'opcode' code=STRING
	//;
	public VMNodeOpCodeElementElements getVMNodeOpCodeElementAccess() {
		return pVMNodeOpCodeElement;
	}
	
	public ParserRule getVMNodeOpCodeElementRule() {
		return getVMNodeOpCodeElementAccess().getRule();
	}
	
	//VMNodeOutElement:
	//    'out' name=QualifiedName 'as' type=ID
	//;
	public VMNodeOutElementElements getVMNodeOutElementAccess() {
		return pVMNodeOutElement;
	}
	
	public ParserRule getVMNodeOutElementRule() {
		return getVMNodeOutElementAccess().getRule();
	}
	
	//VMNodeElement:
	//    policy=('require'|'optional') type=ID name=ID ('default' defaultvalue=(STRING))?
	//;
	public VMNodeElementElements getVMNodeElementAccess() {
		return pVMNodeElement;
	}
	
	public ParserRule getVMNodeElementRule() {
		return getVMNodeElementAccess().getRule();
	}
	
	//VMOverrideElement:
	//    policy=('override') type=ID name=ID ':=' defaultvalue=(STRING)
	//;
	public VMOverrideElementElements getVMOverrideElementAccess() {
		return pVMOverrideElement;
	}
	
	public ParserRule getVMOverrideElementRule() {
		return getVMOverrideElementAccess().getRule();
	}
	
	//// LLM Task definition
	//LlmTaskDefinition:
	//    'llmtask' name=ID '(' ')' ('implements' annotation_interfaces+=AnnotationInterfaceReference (',' annotation_interfaces+=AnnotationInterfaceReference)* )? '{'
	//        (assignment+=LlmVariableAssignment)*
	//    '}'
	//;
	public LlmTaskDefinitionElements getLlmTaskDefinitionAccess() {
		return pLlmTaskDefinition;
	}
	
	public ParserRule getLlmTaskDefinitionRule() {
		return getLlmTaskDefinitionAccess().getRule();
	}
	
	//AnnotationInterfaceReference:
	//    // TODO nowhitespace
	//    '@'name=ID
	//;
	public AnnotationInterfaceReferenceElements getAnnotationInterfaceReferenceAccess() {
		return pAnnotationInterfaceReference;
	}
	
	public ParserRule getAnnotationInterfaceReferenceRule() {
		return getAnnotationInterfaceReferenceAccess().getRule();
	}
	
	//LlmVariableAssignment:
	//    variablename=ID ':=' template=STRING
	//;
	public LlmVariableAssignmentElements getLlmVariableAssignmentAccess() {
		return pLlmVariableAssignment;
	}
	
	public ParserRule getLlmVariableAssignmentRule() {
		return getLlmVariableAssignmentAccess().getRule();
	}
	
	//QualifiedName:
	//    ID ('.'ID)*
	//;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//QualifiedNameWithWildcard:
	//    QualifiedName '.*'?
	//;
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return pQualifiedNameWithWildcard;
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return tINT;
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'" |
	//            "'''"  -> "'''"
	//        ;
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return tWS;
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return tANY_OTHER;
	}
}
