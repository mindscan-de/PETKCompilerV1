/*
 * generated by Xtext 2.27.0
 */
package de.mindscan.ai.aidsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class AiDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.mindscan.ai.aidsl.AiDsl.Model");
		private final Assignment cDefinitionsAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cDefinitionsAlternatives_0 = (Alternatives)cDefinitionsAssignment.eContents().get(0);
		private final RuleCall cDefinitionsWorkflowDefinitionParserRuleCall_0_0 = (RuleCall)cDefinitionsAlternatives_0.eContents().get(0);
		private final RuleCall cDefinitionsLlmTaskDefinitionParserRuleCall_0_1 = (RuleCall)cDefinitionsAlternatives_0.eContents().get(1);
		
		//Model:
		//    definitions += (WorkflowDefinition|LlmTaskDefinition)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//definitions += (WorkflowDefinition|LlmTaskDefinition)*
		public Assignment getDefinitionsAssignment() { return cDefinitionsAssignment; }
		
		//(WorkflowDefinition|LlmTaskDefinition)
		public Alternatives getDefinitionsAlternatives_0() { return cDefinitionsAlternatives_0; }
		
		//WorkflowDefinition
		public RuleCall getDefinitionsWorkflowDefinitionParserRuleCall_0_0() { return cDefinitionsWorkflowDefinitionParserRuleCall_0_0; }
		
		//LlmTaskDefinition
		public RuleCall getDefinitionsLlmTaskDefinitionParserRuleCall_0_1() { return cDefinitionsLlmTaskDefinitionParserRuleCall_0_1; }
	}
	public class WorkflowDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.mindscan.ai.aidsl.AiDsl.WorkflowDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWorkflowKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//WorkflowDefinition:
		//    'workflow' name=ID '(' ')' '{'
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'workflow' name=ID '(' ')' '{'
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'workflow'
		public Keyword getWorkflowKeyword_0() { return cWorkflowKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class LlmTaskDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.mindscan.ai.aidsl.AiDsl.LlmTaskDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLlmtaskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cImplementsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cAnnotation_interfacesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cAnnotation_interfacesAnnotationInterfaceReferenceParserRuleCall_4_1_0 = (RuleCall)cAnnotation_interfacesAssignment_4_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cAssignmentAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cAssignmentLlmVariableAssignmentParserRuleCall_6_0 = (RuleCall)cAssignmentAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//LlmTaskDefinition:
		//    // TODO a comma separated list of AnnotatedInterfaceReferences
		//    'llmtask' name=ID '(' ')' ('implements' annotation_interfaces+=AnnotationInterfaceReference )? '{'
		//        assignment+=LlmVariableAssignment*
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//// TODO a comma separated list of AnnotatedInterfaceReferences
		//'llmtask' name=ID '(' ')' ('implements' annotation_interfaces+=AnnotationInterfaceReference )? '{'
		//    assignment+=LlmVariableAssignment*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//// TODO a comma separated list of AnnotatedInterfaceReferences
		//'llmtask'
		public Keyword getLlmtaskKeyword_0() { return cLlmtaskKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//('implements' annotation_interfaces+=AnnotationInterfaceReference )?
		public Group getGroup_4() { return cGroup_4; }
		
		//'implements'
		public Keyword getImplementsKeyword_4_0() { return cImplementsKeyword_4_0; }
		
		//annotation_interfaces+=AnnotationInterfaceReference
		public Assignment getAnnotation_interfacesAssignment_4_1() { return cAnnotation_interfacesAssignment_4_1; }
		
		//AnnotationInterfaceReference
		public RuleCall getAnnotation_interfacesAnnotationInterfaceReferenceParserRuleCall_4_1_0() { return cAnnotation_interfacesAnnotationInterfaceReferenceParserRuleCall_4_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//assignment+=LlmVariableAssignment*
		public Assignment getAssignmentAssignment_6() { return cAssignmentAssignment_6; }
		
		//LlmVariableAssignment
		public RuleCall getAssignmentLlmVariableAssignmentParserRuleCall_6_0() { return cAssignmentLlmVariableAssignmentParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class AnnotationInterfaceReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.mindscan.ai.aidsl.AiDsl.AnnotationInterfaceReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//AnnotationInterfaceReference:
		//    // TODO nowhitespace
		//    '@'name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//// TODO nowhitespace
		//'@'name=ID
		public Group getGroup() { return cGroup; }
		
		//// TODO nowhitespace
		//'@'
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class LlmVariableAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.mindscan.ai.aidsl.AiDsl.LlmVariableAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariablenameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVariablenameIDTerminalRuleCall_0_0 = (RuleCall)cVariablenameAssignment_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTemplateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTemplateSTRINGTerminalRuleCall_2_0 = (RuleCall)cTemplateAssignment_2.eContents().get(0);
		
		//LlmVariableAssignment:
		//    variablename=ID ':=' template=STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//variablename=ID ':=' template=STRING
		public Group getGroup() { return cGroup; }
		
		//variablename=ID
		public Assignment getVariablenameAssignment_0() { return cVariablenameAssignment_0; }
		
		//ID
		public RuleCall getVariablenameIDTerminalRuleCall_0_0() { return cVariablenameIDTerminalRuleCall_0_0; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_1() { return cColonEqualsSignKeyword_1; }
		
		//template=STRING
		public Assignment getTemplateAssignment_2() { return cTemplateAssignment_2; }
		
		//STRING
		public RuleCall getTemplateSTRINGTerminalRuleCall_2_0() { return cTemplateSTRINGTerminalRuleCall_2_0; }
	}
	
	
	private final ModelElements pModel;
	private final WorkflowDefinitionElements pWorkflowDefinition;
	private final LlmTaskDefinitionElements pLlmTaskDefinition;
	private final AnnotationInterfaceReferenceElements pAnnotationInterfaceReference;
	private final LlmVariableAssignmentElements pLlmVariableAssignment;
	private final TerminalRule tID;
	private final TerminalRule tINT;
	private final TerminalRule tSTRING;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tWS;
	private final TerminalRule tANY_OTHER;
	
	private final Grammar grammar;

	@Inject
	public AiDslGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pModel = new ModelElements();
		this.pWorkflowDefinition = new WorkflowDefinitionElements();
		this.pLlmTaskDefinition = new LlmTaskDefinitionElements();
		this.pAnnotationInterfaceReference = new AnnotationInterfaceReferenceElements();
		this.pLlmVariableAssignment = new LlmVariableAssignmentElements();
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.mindscan.ai.aidsl.AiDsl.ID");
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.mindscan.ai.aidsl.AiDsl.INT");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.mindscan.ai.aidsl.AiDsl.STRING");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.mindscan.ai.aidsl.AiDsl.ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.mindscan.ai.aidsl.AiDsl.SL_COMMENT");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.mindscan.ai.aidsl.AiDsl.WS");
		this.tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.mindscan.ai.aidsl.AiDsl.ANY_OTHER");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.mindscan.ai.aidsl.AiDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Model:
	//    definitions += (WorkflowDefinition|LlmTaskDefinition)*
	//;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//WorkflowDefinition:
	//    'workflow' name=ID '(' ')' '{'
	//    '}'
	//;
	public WorkflowDefinitionElements getWorkflowDefinitionAccess() {
		return pWorkflowDefinition;
	}
	
	public ParserRule getWorkflowDefinitionRule() {
		return getWorkflowDefinitionAccess().getRule();
	}
	
	//LlmTaskDefinition:
	//    // TODO a comma separated list of AnnotatedInterfaceReferences
	//    'llmtask' name=ID '(' ')' ('implements' annotation_interfaces+=AnnotationInterfaceReference )? '{'
	//        assignment+=LlmVariableAssignment*
	//    '}'
	//;
	public LlmTaskDefinitionElements getLlmTaskDefinitionAccess() {
		return pLlmTaskDefinition;
	}
	
	public ParserRule getLlmTaskDefinitionRule() {
		return getLlmTaskDefinitionAccess().getRule();
	}
	
	//AnnotationInterfaceReference:
	//    // TODO nowhitespace
	//    '@'name=ID
	//;
	public AnnotationInterfaceReferenceElements getAnnotationInterfaceReferenceAccess() {
		return pAnnotationInterfaceReference;
	}
	
	public ParserRule getAnnotationInterfaceReferenceRule() {
		return getAnnotationInterfaceReferenceAccess().getRule();
	}
	
	//LlmVariableAssignment:
	//    variablename=ID ':=' template=STRING
	//;
	public LlmVariableAssignmentElements getLlmVariableAssignmentAccess() {
		return pLlmVariableAssignment;
	}
	
	public ParserRule getLlmVariableAssignmentRule() {
		return getLlmVariableAssignmentAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return tINT;
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'" |
	//            "'''"  -> "'''"
	//        ;
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return tWS;
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return tANY_OTHER;
	}
}
