/*
 * generated by Xtext 2.27.0
 */
package de.mindscan.ai.aidsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class AiDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.mindscan.ai.aidsl.AiDsl.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPackage_declarationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPackage_declarationPackageDeclarationParserRuleCall_0_0 = (RuleCall)cPackage_declarationAssignment_0.eContents().get(0);
		private final Assignment cImport_declarationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImport_declarationsImportDeclarationParserRuleCall_1_0 = (RuleCall)cImport_declarationsAssignment_1.eContents().get(0);
		private final Assignment cDefinitionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cDefinitionsAlternatives_2_0 = (Alternatives)cDefinitionsAssignment_2.eContents().get(0);
		private final RuleCall cDefinitionsWorkflowDefinitionParserRuleCall_2_0_0 = (RuleCall)cDefinitionsAlternatives_2_0.eContents().get(0);
		private final RuleCall cDefinitionsWorkflowDataDictionaryDefinitionParserRuleCall_2_0_1 = (RuleCall)cDefinitionsAlternatives_2_0.eContents().get(1);
		private final RuleCall cDefinitionsWorkflowInputDefinitionParserRuleCall_2_0_2 = (RuleCall)cDefinitionsAlternatives_2_0.eContents().get(2);
		private final RuleCall cDefinitionsLlmTaskDefinitionParserRuleCall_2_0_3 = (RuleCall)cDefinitionsAlternatives_2_0.eContents().get(3);
		private final RuleCall cDefinitionsVMNodeDefinitionParserRuleCall_2_0_4 = (RuleCall)cDefinitionsAlternatives_2_0.eContents().get(4);
		
		//Model:
		//    (package_declaration=PackageDeclaration)?
		//    (import_declarations+=ImportDeclaration)*
		//    definitions += (
		//        WorkflowDefinition|
		//        WorkflowDataDictionaryDefinition|
		//        WorkflowInputDefinition|
		//        LlmTaskDefinition|
		//        VMNodeDefinition
		//    )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(package_declaration=PackageDeclaration)?
		//(import_declarations+=ImportDeclaration)*
		//definitions += (
		//    WorkflowDefinition|
		//    WorkflowDataDictionaryDefinition|
		//    WorkflowInputDefinition|
		//    LlmTaskDefinition|
		//    VMNodeDefinition
		//)*
		public Group getGroup() { return cGroup; }
		
		//(package_declaration=PackageDeclaration)?
		public Assignment getPackage_declarationAssignment_0() { return cPackage_declarationAssignment_0; }
		
		//PackageDeclaration
		public RuleCall getPackage_declarationPackageDeclarationParserRuleCall_0_0() { return cPackage_declarationPackageDeclarationParserRuleCall_0_0; }
		
		//(import_declarations+=ImportDeclaration)*
		public Assignment getImport_declarationsAssignment_1() { return cImport_declarationsAssignment_1; }
		
		//ImportDeclaration
		public RuleCall getImport_declarationsImportDeclarationParserRuleCall_1_0() { return cImport_declarationsImportDeclarationParserRuleCall_1_0; }
		
		//definitions += (
		//    WorkflowDefinition|
		//    WorkflowDataDictionaryDefinition|
		//    WorkflowInputDefinition|
		//    LlmTaskDefinition|
		//    VMNodeDefinition
		//)*
		public Assignment getDefinitionsAssignment_2() { return cDefinitionsAssignment_2; }
		
		//(
		//       WorkflowDefinition|
		//       WorkflowDataDictionaryDefinition|
		//       WorkflowInputDefinition|
		//       LlmTaskDefinition|
		//       VMNodeDefinition
		//   )
		public Alternatives getDefinitionsAlternatives_2_0() { return cDefinitionsAlternatives_2_0; }
		
		//WorkflowDefinition
		public RuleCall getDefinitionsWorkflowDefinitionParserRuleCall_2_0_0() { return cDefinitionsWorkflowDefinitionParserRuleCall_2_0_0; }
		
		//WorkflowDataDictionaryDefinition
		public RuleCall getDefinitionsWorkflowDataDictionaryDefinitionParserRuleCall_2_0_1() { return cDefinitionsWorkflowDataDictionaryDefinitionParserRuleCall_2_0_1; }
		
		//WorkflowInputDefinition
		public RuleCall getDefinitionsWorkflowInputDefinitionParserRuleCall_2_0_2() { return cDefinitionsWorkflowInputDefinitionParserRuleCall_2_0_2; }
		
		//LlmTaskDefinition
		public RuleCall getDefinitionsLlmTaskDefinitionParserRuleCall_2_0_3() { return cDefinitionsLlmTaskDefinitionParserRuleCall_2_0_3; }
		
		//VMNodeDefinition
		public RuleCall getDefinitionsVMNodeDefinitionParserRuleCall_2_0_4() { return cDefinitionsVMNodeDefinitionParserRuleCall_2_0_4; }
	}
	public class PackageDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.mindscan.ai.aidsl.AiDsl.PackageDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//PackageDeclaration:
		//    'package' name=QualifiedName
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'package' name=QualifiedName
		public Group getGroup() { return cGroup; }
		
		//'package'
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
	}
	public class ImportDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.mindscan.ai.aidsl.AiDsl.ImportDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//ImportDeclaration:
		//    'import' importedNamespace=QualifiedNameWithWildcard
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' importedNamespace=QualifiedNameWithWildcard
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//importedNamespace=QualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }
		
		//QualifiedNameWithWildcard
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0; }
	}
	public class WorkflowInputDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.mindscan.ai.aidsl.AiDsl.WorkflowInputDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWorkflowInputDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDatainputKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cUiElementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cUiElementsWorkflowUIElementParserRuleCall_4_0 = (RuleCall)cUiElementsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//// should we reference the workflow or the oher way around?
		//WorkflowInputDefinition:
		//    {WorkflowInputDefinition} 'datainput' name=ID '{'
		//        (uiElements+=WorkflowUIElement)*
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{WorkflowInputDefinition} 'datainput' name=ID '{'
		//    (uiElements+=WorkflowUIElement)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{WorkflowInputDefinition}
		public Action getWorkflowInputDefinitionAction_0() { return cWorkflowInputDefinitionAction_0; }
		
		//'datainput'
		public Keyword getDatainputKeyword_1() { return cDatainputKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//(uiElements+=WorkflowUIElement)*
		public Assignment getUiElementsAssignment_4() { return cUiElementsAssignment_4; }
		
		//WorkflowUIElement
		public RuleCall getUiElementsWorkflowUIElementParserRuleCall_4_0() { return cUiElementsWorkflowUIElementParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class WorkflowUIElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.mindscan.ai.aidsl.AiDsl.WorkflowUIElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameQualifiedNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDatatypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDatatypeELEMENTTYPEParserRuleCall_2_0 = (RuleCall)cDatatypeAssignment_2.eContents().get(0);
		private final Assignment cUielementAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cUielementWorkflowUIElementMapParserRuleCall_3_0 = (RuleCall)cUielementAssignment_3.eContents().get(0);
		
		//WorkflowUIElement:
		//    name=QualifiedName ':' datatype=ELEMENTTYPE (uielement=WorkflowUIElementMap)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=QualifiedName ':' datatype=ELEMENTTYPE (uielement=WorkflowUIElementMap)?
		public Group getGroup() { return cGroup; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_0_0() { return cNameQualifiedNameParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//datatype=ELEMENTTYPE
		public Assignment getDatatypeAssignment_2() { return cDatatypeAssignment_2; }
		
		//ELEMENTTYPE
		public RuleCall getDatatypeELEMENTTYPEParserRuleCall_2_0() { return cDatatypeELEMENTTYPEParserRuleCall_2_0; }
		
		//(uielement=WorkflowUIElementMap)?
		public Assignment getUielementAssignment_3() { return cUielementAssignment_3; }
		
		//WorkflowUIElementMap
		public RuleCall getUielementWorkflowUIElementMapParserRuleCall_3_0() { return cUielementWorkflowUIElementMapParserRuleCall_3_0; }
	}
	public class WorkflowUIElementMapElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.mindscan.ai.aidsl.AiDsl.WorkflowUIElementMap");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUiKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLabelKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLabelAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLabelSTRINGTerminalRuleCall_3_0 = (RuleCall)cLabelAssignment_3.eContents().get(0);
		private final Keyword cUitypeKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cUitypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cUitypeSTRINGTerminalRuleCall_5_0 = (RuleCall)cUitypeAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//WorkflowUIElementMap:
		//    'ui' '{'
		//        'label' label=STRING
		//        'uitype' uitype=STRING
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'ui' '{'
		//    'label' label=STRING
		//    'uitype' uitype=STRING
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'ui'
		public Keyword getUiKeyword_0() { return cUiKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'label'
		public Keyword getLabelKeyword_2() { return cLabelKeyword_2; }
		
		//label=STRING
		public Assignment getLabelAssignment_3() { return cLabelAssignment_3; }
		
		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_3_0() { return cLabelSTRINGTerminalRuleCall_3_0; }
		
		//'uitype'
		public Keyword getUitypeKeyword_4() { return cUitypeKeyword_4; }
		
		//uitype=STRING
		public Assignment getUitypeAssignment_5() { return cUitypeAssignment_5; }
		
		//STRING
		public RuleCall getUitypeSTRINGTerminalRuleCall_5_0() { return cUitypeSTRINGTerminalRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class WorkflowDataDictionaryDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.mindscan.ai.aidsl.AiDsl.WorkflowDataDictionaryDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWorkflowDataDictionaryDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDatadictionaryKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDataDictionaryElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDataDictionaryElementsWorkflowDataDictionaryElementParserRuleCall_3_0 = (RuleCall)cDataDictionaryElementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// ---------------------------------------
		//// Workflow Data Defitinion /
		//// Workflow Data Dictionary
		//// ---------------------------------------
		////
		//// ---------------------------------------
		//WorkflowDataDictionaryDefinition:
		//    {WorkflowDataDictionaryDefinition} 'datadictionary' '{'
		//        (dataDictionaryElements+=WorkflowDataDictionaryElement)*
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{WorkflowDataDictionaryDefinition} 'datadictionary' '{'
		//    (dataDictionaryElements+=WorkflowDataDictionaryElement)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{WorkflowDataDictionaryDefinition}
		public Action getWorkflowDataDictionaryDefinitionAction_0() { return cWorkflowDataDictionaryDefinitionAction_0; }
		
		//'datadictionary'
		public Keyword getDatadictionaryKeyword_1() { return cDatadictionaryKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(dataDictionaryElements+=WorkflowDataDictionaryElement)*
		public Assignment getDataDictionaryElementsAssignment_3() { return cDataDictionaryElementsAssignment_3; }
		
		//WorkflowDataDictionaryElement
		public RuleCall getDataDictionaryElementsWorkflowDataDictionaryElementParserRuleCall_3_0() { return cDataDictionaryElementsWorkflowDataDictionaryElementParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class WorkflowDataDictionaryElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.mindscan.ai.aidsl.AiDsl.WorkflowDataDictionaryElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDataKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExtendsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cExtendsWorkflowDataDictionaryElementCrossReference_2_1_0 = (CrossReference)cExtendsAssignment_2_1.eContents().get(0);
		private final RuleCall cExtendsWorkflowDataDictionaryElementIDTerminalRuleCall_2_1_0_1 = (RuleCall)cExtendsWorkflowDataDictionaryElementCrossReference_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cKeyValuePairsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cKeyValuePairsDatadictionaryKeyValuePairParserRuleCall_4_0 = (RuleCall)cKeyValuePairsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//WorkflowDataDictionaryElement:
		//    "data" name=ID ('extends' extends=[WorkflowDataDictionaryElement])?
		//        // can be a map or a list or a direct value
		//        '{'
		//            (keyValuePairs+=DatadictionaryKeyValuePair)*
		//        '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"data" name=ID ('extends' extends=[WorkflowDataDictionaryElement])?
		//    // can be a map or a list or a direct value
		//    '{'
		//        (keyValuePairs+=DatadictionaryKeyValuePair)*
		//    '}'
		public Group getGroup() { return cGroup; }
		
		//"data"
		public Keyword getDataKeyword_0() { return cDataKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('extends' extends=[WorkflowDataDictionaryElement])?
		public Group getGroup_2() { return cGroup_2; }
		
		//'extends'
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }
		
		//extends=[WorkflowDataDictionaryElement]
		public Assignment getExtendsAssignment_2_1() { return cExtendsAssignment_2_1; }
		
		//[WorkflowDataDictionaryElement]
		public CrossReference getExtendsWorkflowDataDictionaryElementCrossReference_2_1_0() { return cExtendsWorkflowDataDictionaryElementCrossReference_2_1_0; }
		
		//ID
		public RuleCall getExtendsWorkflowDataDictionaryElementIDTerminalRuleCall_2_1_0_1() { return cExtendsWorkflowDataDictionaryElementIDTerminalRuleCall_2_1_0_1; }
		
		//// can be a map or a list or a direct value
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//(keyValuePairs+=DatadictionaryKeyValuePair)*
		public Assignment getKeyValuePairsAssignment_4() { return cKeyValuePairsAssignment_4; }
		
		//DatadictionaryKeyValuePair
		public RuleCall getKeyValuePairsDatadictionaryKeyValuePairParserRuleCall_4_0() { return cKeyValuePairsDatadictionaryKeyValuePairParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class DatadictionaryKeyValuePairElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.mindscan.ai.aidsl.AiDsl.DatadictionaryKeyValuePair");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyIDTerminalRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cValueAlternatives_2_0 = (Alternatives)cValueAssignment_2.eContents().get(0);
		private final RuleCall cValueDataDictionaryBooleanValueParserRuleCall_2_0_0 = (RuleCall)cValueAlternatives_2_0.eContents().get(0);
		private final RuleCall cValueDataDictionaryStringValueParserRuleCall_2_0_1 = (RuleCall)cValueAlternatives_2_0.eContents().get(1);
		private final RuleCall cValueDataDictionaryNullValueParserRuleCall_2_0_2 = (RuleCall)cValueAlternatives_2_0.eContents().get(2);
		
		//// TODO: we want alsoo integers, maps, lists
		//DatadictionaryKeyValuePair:
		//    // basically key value stuff.
		//    key=ID ':' value=(
		//        DataDictionaryBooleanValue|
		//        DataDictionaryStringValue|
		//        DataDictionaryNullValue
		//    )
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//// basically key value stuff.
		//key=ID ':' value=(
		//    DataDictionaryBooleanValue|
		//    DataDictionaryStringValue|
		//    DataDictionaryNullValue
		//)
		public Group getGroup() { return cGroup; }
		
		//// basically key value stuff.
		//key=ID
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//ID
		public RuleCall getKeyIDTerminalRuleCall_0_0() { return cKeyIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=(
		//       DataDictionaryBooleanValue|
		//       DataDictionaryStringValue|
		//       DataDictionaryNullValue
		//   )
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//(
		//        DataDictionaryBooleanValue|
		//        DataDictionaryStringValue|
		//        DataDictionaryNullValue
		//    )
		public Alternatives getValueAlternatives_2_0() { return cValueAlternatives_2_0; }
		
		//DataDictionaryBooleanValue
		public RuleCall getValueDataDictionaryBooleanValueParserRuleCall_2_0_0() { return cValueDataDictionaryBooleanValueParserRuleCall_2_0_0; }
		
		//DataDictionaryStringValue
		public RuleCall getValueDataDictionaryStringValueParserRuleCall_2_0_1() { return cValueDataDictionaryStringValueParserRuleCall_2_0_1; }
		
		//DataDictionaryNullValue
		public RuleCall getValueDataDictionaryNullValueParserRuleCall_2_0_2() { return cValueDataDictionaryNullValueParserRuleCall_2_0_2; }
	}
	public class DataDictionaryBooleanValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.mindscan.ai.aidsl.AiDsl.DataDictionaryBooleanValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//DataDictionaryBooleanValue:
		//    'true'|'false'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'true'|'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class DataDictionaryStringValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.mindscan.ai.aidsl.AiDsl.DataDictionaryStringValue");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//DataDictionaryStringValue:
		//    STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}
	public class DataDictionaryNullValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.mindscan.ai.aidsl.AiDsl.DataDictionaryNullValue");
		private final Keyword cNullKeyword = (Keyword)rule.eContents().get(1);
		
		//DataDictionaryNullValue:
		//    'null'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'null'
		public Keyword getNullKeyword() { return cNullKeyword; }
	}
	public class VMNodeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.mindscan.ai.aidsl.AiDsl.VMNodeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVmnodeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNodetypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cNodetypeAlternatives_1_0 = (Alternatives)cNodetypeAssignment_1.eContents().get(0);
		private final Keyword cNodetypeSuperKeyword_1_0_0 = (Keyword)cNodetypeAlternatives_1_0.eContents().get(0);
		private final Keyword cNodetypeOverlayKeyword_1_0_1 = (Keyword)cNodetypeAlternatives_1_0.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cElementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElementsVMNodeEleemntsParserRuleCall_4_0 = (RuleCall)cElementsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//// ---------------------------------------
		//// VMNode stuff
		//// ---------------------------------------
		////
		//// ---------------------------------------
		//VMNodeDefinition:
		//    'vmnode' (nodetype=('super'|'overlay'))? name=ID '{'
		//        (elements+=VMNodeEleemnts)*
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'vmnode' (nodetype=('super'|'overlay'))? name=ID '{'
		//    (elements+=VMNodeEleemnts)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'vmnode'
		public Keyword getVmnodeKeyword_0() { return cVmnodeKeyword_0; }
		
		//(nodetype=('super'|'overlay'))?
		public Assignment getNodetypeAssignment_1() { return cNodetypeAssignment_1; }
		
		//('super'|'overlay')
		public Alternatives getNodetypeAlternatives_1_0() { return cNodetypeAlternatives_1_0; }
		
		//'super'
		public Keyword getNodetypeSuperKeyword_1_0_0() { return cNodetypeSuperKeyword_1_0_0; }
		
		//'overlay'
		public Keyword getNodetypeOverlayKeyword_1_0_1() { return cNodetypeOverlayKeyword_1_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//(elements+=VMNodeEleemnts)*
		public Assignment getElementsAssignment_4() { return cElementsAssignment_4; }
		
		//VMNodeEleemnts
		public RuleCall getElementsVMNodeEleemntsParserRuleCall_4_0() { return cElementsVMNodeEleemntsParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class VMNodeEleemntsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.mindscan.ai.aidsl.AiDsl.VMNodeEleemnts");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVMNodeOpCodeElementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVMNodeOutElementsParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cVMNodeInElementsParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cVMNodeFieldElementsParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//VMNodeEleemnts:
		//    (
		//        VMNodeOpCodeElement|
		//        VMNodeOutElements|
		//        VMNodeInElements|
		//        VMNodeFieldElements
		//    )
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(
		//    VMNodeOpCodeElement|
		//    VMNodeOutElements|
		//    VMNodeInElements|
		//    VMNodeFieldElements
		//)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//VMNodeOpCodeElement
		public RuleCall getVMNodeOpCodeElementParserRuleCall_0() { return cVMNodeOpCodeElementParserRuleCall_0; }
		
		//VMNodeOutElements
		public RuleCall getVMNodeOutElementsParserRuleCall_1() { return cVMNodeOutElementsParserRuleCall_1; }
		
		//VMNodeInElements
		public RuleCall getVMNodeInElementsParserRuleCall_2() { return cVMNodeInElementsParserRuleCall_2; }
		
		//VMNodeFieldElements
		public RuleCall getVMNodeFieldElementsParserRuleCall_3() { return cVMNodeFieldElementsParserRuleCall_3; }
	}
	public class VMNodeOpCodeElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.mindscan.ai.aidsl.AiDsl.VMNodeOpCodeElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOpcodeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOpcodeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOpcodeSTRINGTerminalRuleCall_1_0 = (RuleCall)cOpcodeAssignment_1.eContents().get(0);
		
		//VMNodeOpCodeElement:
		//    'opcode' opcode=STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'opcode' opcode=STRING
		public Group getGroup() { return cGroup; }
		
		//'opcode'
		public Keyword getOpcodeKeyword_0() { return cOpcodeKeyword_0; }
		
		//opcode=STRING
		public Assignment getOpcodeAssignment_1() { return cOpcodeAssignment_1; }
		
		//STRING
		public RuleCall getOpcodeSTRINGTerminalRuleCall_1_0() { return cOpcodeSTRINGTerminalRuleCall_1_0; }
	}
	public class VMNodeOutElementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.mindscan.ai.aidsl.AiDsl.VMNodeOutElements");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVMNodeOutElementsAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cOutKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOutElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOutElementsVMNodeOutElementParserRuleCall_3_0 = (RuleCall)cOutElementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//VMNodeOutElements:
		//    {VMNodeOutElements} 'out' '{'
		//        (outElements+=VMNodeOutElement)*
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{VMNodeOutElements} 'out' '{'
		//    (outElements+=VMNodeOutElement)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{VMNodeOutElements}
		public Action getVMNodeOutElementsAction_0() { return cVMNodeOutElementsAction_0; }
		
		//'out'
		public Keyword getOutKeyword_1() { return cOutKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(outElements+=VMNodeOutElement)*
		public Assignment getOutElementsAssignment_3() { return cOutElementsAssignment_3; }
		
		//VMNodeOutElement
		public RuleCall getOutElementsVMNodeOutElementParserRuleCall_3_0() { return cOutElementsVMNodeOutElementParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class VMNodeInElementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.mindscan.ai.aidsl.AiDsl.VMNodeInElements");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVMNodeInElementsAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cInKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInElementsVMNodeInElementParserRuleCall_3_0 = (RuleCall)cInElementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//VMNodeInElements:
		//    {VMNodeInElements} 'in' '{'
		//        (inElements+=VMNodeInElement)*
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{VMNodeInElements} 'in' '{'
		//    (inElements+=VMNodeInElement)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{VMNodeInElements}
		public Action getVMNodeInElementsAction_0() { return cVMNodeInElementsAction_0; }
		
		//'in'
		public Keyword getInKeyword_1() { return cInKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(inElements+=VMNodeInElement)*
		public Assignment getInElementsAssignment_3() { return cInElementsAssignment_3; }
		
		//VMNodeInElement
		public RuleCall getInElementsVMNodeInElementParserRuleCall_3_0() { return cInElementsVMNodeInElementParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class VMNodeFieldElementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.mindscan.ai.aidsl.AiDsl.VMNodeFieldElements");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVMNodeFieldElementsAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFieldsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFieldELementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cFieldELementsAlternatives_3_0 = (Alternatives)cFieldELementsAssignment_3.eContents().get(0);
		private final RuleCall cFieldELementsVMFieldElementParserRuleCall_3_0_0 = (RuleCall)cFieldELementsAlternatives_3_0.eContents().get(0);
		private final RuleCall cFieldELementsVMOverrideFieldElementParserRuleCall_3_0_1 = (RuleCall)cFieldELementsAlternatives_3_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//VMNodeFieldElements:
		//    {VMNodeFieldElements} 'fields' '{'
		//        (fieldELements+=(VMFieldElement|VMOverrideFieldElement))*
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{VMNodeFieldElements} 'fields' '{'
		//    (fieldELements+=(VMFieldElement|VMOverrideFieldElement))*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{VMNodeFieldElements}
		public Action getVMNodeFieldElementsAction_0() { return cVMNodeFieldElementsAction_0; }
		
		//'fields'
		public Keyword getFieldsKeyword_1() { return cFieldsKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(fieldELements+=(VMFieldElement|VMOverrideFieldElement))*
		public Assignment getFieldELementsAssignment_3() { return cFieldELementsAssignment_3; }
		
		//(VMFieldElement|VMOverrideFieldElement)
		public Alternatives getFieldELementsAlternatives_3_0() { return cFieldELementsAlternatives_3_0; }
		
		//VMFieldElement
		public RuleCall getFieldELementsVMFieldElementParserRuleCall_3_0_0() { return cFieldELementsVMFieldElementParserRuleCall_3_0_0; }
		
		//VMOverrideFieldElement
		public RuleCall getFieldELementsVMOverrideFieldElementParserRuleCall_3_0_1() { return cFieldELementsVMOverrideFieldElementParserRuleCall_3_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class VMNodeOutElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.mindscan.ai.aidsl.AiDsl.VMNodeOutElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameQualifiedNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cAsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeELEMENTTYPEParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cHasrequireAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Keyword cHasrequireRequireKeyword_3_0_0 = (Keyword)cHasrequireAssignment_3_0.eContents().get(0);
		private final Assignment cInputreferenceAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cInputreferenceQualifiedNameParserRuleCall_3_1_0 = (RuleCall)cInputreferenceAssignment_3_1.eContents().get(0);
		
		//VMNodeOutElement:
		//    name=QualifiedName 'as' type=ELEMENTTYPE (hasrequire?='require' inputreference=QualifiedName)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=QualifiedName 'as' type=ELEMENTTYPE (hasrequire?='require' inputreference=QualifiedName)?
		public Group getGroup() { return cGroup; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_0_0() { return cNameQualifiedNameParserRuleCall_0_0; }
		
		//'as'
		public Keyword getAsKeyword_1() { return cAsKeyword_1; }
		
		//type=ELEMENTTYPE
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//ELEMENTTYPE
		public RuleCall getTypeELEMENTTYPEParserRuleCall_2_0() { return cTypeELEMENTTYPEParserRuleCall_2_0; }
		
		//(hasrequire?='require' inputreference=QualifiedName)?
		public Group getGroup_3() { return cGroup_3; }
		
		//hasrequire?='require'
		public Assignment getHasrequireAssignment_3_0() { return cHasrequireAssignment_3_0; }
		
		//'require'
		public Keyword getHasrequireRequireKeyword_3_0_0() { return cHasrequireRequireKeyword_3_0_0; }
		
		//inputreference=QualifiedName
		public Assignment getInputreferenceAssignment_3_1() { return cInputreferenceAssignment_3_1; }
		
		//QualifiedName
		public RuleCall getInputreferenceQualifiedNameParserRuleCall_3_1_0() { return cInputreferenceQualifiedNameParserRuleCall_3_1_0; }
	}
	public class VMNodeInElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.mindscan.ai.aidsl.AiDsl.VMNodeInElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPolicyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cPolicyAlternatives_0_0 = (Alternatives)cPolicyAssignment_0.eContents().get(0);
		private final Keyword cPolicyRequireKeyword_0_0_0 = (Keyword)cPolicyAlternatives_0_0.eContents().get(0);
		private final Keyword cPolicyOptionalKeyword_0_0_1 = (Keyword)cPolicyAlternatives_0_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//VMNodeInElement:
		//    (policy=('require'|'optional'))? name=QualifiedName
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(policy=('require'|'optional'))? name=QualifiedName
		public Group getGroup() { return cGroup; }
		
		//(policy=('require'|'optional'))?
		public Assignment getPolicyAssignment_0() { return cPolicyAssignment_0; }
		
		//('require'|'optional')
		public Alternatives getPolicyAlternatives_0_0() { return cPolicyAlternatives_0_0; }
		
		//'require'
		public Keyword getPolicyRequireKeyword_0_0_0() { return cPolicyRequireKeyword_0_0_0; }
		
		//'optional'
		public Keyword getPolicyOptionalKeyword_0_0_1() { return cPolicyOptionalKeyword_0_0_1; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
	}
	public class VMFieldElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.mindscan.ai.aidsl.AiDsl.VMFieldElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPolicyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cPolicyAlternatives_0_0 = (Alternatives)cPolicyAssignment_0.eContents().get(0);
		private final Keyword cPolicyRequireKeyword_0_0_0 = (Keyword)cPolicyAlternatives_0_0.eContents().get(0);
		private final Keyword cPolicyOptionalKeyword_0_0_1 = (Keyword)cPolicyAlternatives_0_0.eContents().get(1);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeELEMENTTYPEParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cDefaultKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDefaultvalueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDefaultvalueSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cDefaultvalueAssignment_3_1.eContents().get(0);
		
		//VMFieldElement:
		//    policy=('require'|'optional') type=ELEMENTTYPE name=ID ('default' defaultvalue=(STRING))?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//policy=('require'|'optional') type=ELEMENTTYPE name=ID ('default' defaultvalue=(STRING))?
		public Group getGroup() { return cGroup; }
		
		//policy=('require'|'optional')
		public Assignment getPolicyAssignment_0() { return cPolicyAssignment_0; }
		
		//('require'|'optional')
		public Alternatives getPolicyAlternatives_0_0() { return cPolicyAlternatives_0_0; }
		
		//'require'
		public Keyword getPolicyRequireKeyword_0_0_0() { return cPolicyRequireKeyword_0_0_0; }
		
		//'optional'
		public Keyword getPolicyOptionalKeyword_0_0_1() { return cPolicyOptionalKeyword_0_0_1; }
		
		//type=ELEMENTTYPE
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//ELEMENTTYPE
		public RuleCall getTypeELEMENTTYPEParserRuleCall_1_0() { return cTypeELEMENTTYPEParserRuleCall_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('default' defaultvalue=(STRING))?
		public Group getGroup_3() { return cGroup_3; }
		
		//'default'
		public Keyword getDefaultKeyword_3_0() { return cDefaultKeyword_3_0; }
		
		//defaultvalue=(STRING)
		public Assignment getDefaultvalueAssignment_3_1() { return cDefaultvalueAssignment_3_1; }
		
		//(STRING)
		public RuleCall getDefaultvalueSTRINGTerminalRuleCall_3_1_0() { return cDefaultvalueSTRINGTerminalRuleCall_3_1_0; }
	}
	public class VMOverrideFieldElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.mindscan.ai.aidsl.AiDsl.VMOverrideFieldElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPolicyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cPolicyOverrideKeyword_0_0 = (Keyword)cPolicyAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeELEMENTTYPEParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDefaultvalueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDefaultvalueSTRINGTerminalRuleCall_4_0 = (RuleCall)cDefaultvalueAssignment_4.eContents().get(0);
		
		//VMOverrideFieldElement:
		//    policy=('override') type=ELEMENTTYPE name=ID ':=' defaultvalue=(STRING)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//policy=('override') type=ELEMENTTYPE name=ID ':=' defaultvalue=(STRING)
		public Group getGroup() { return cGroup; }
		
		//policy=('override')
		public Assignment getPolicyAssignment_0() { return cPolicyAssignment_0; }
		
		//('override')
		public Keyword getPolicyOverrideKeyword_0_0() { return cPolicyOverrideKeyword_0_0; }
		
		//type=ELEMENTTYPE
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//ELEMENTTYPE
		public RuleCall getTypeELEMENTTYPEParserRuleCall_1_0() { return cTypeELEMENTTYPEParserRuleCall_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_3() { return cColonEqualsSignKeyword_3; }
		
		//defaultvalue=(STRING)
		public Assignment getDefaultvalueAssignment_4() { return cDefaultvalueAssignment_4; }
		
		//(STRING)
		public RuleCall getDefaultvalueSTRINGTerminalRuleCall_4_0() { return cDefaultvalueSTRINGTerminalRuleCall_4_0; }
	}
	public class LlmTaskDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.mindscan.ai.aidsl.AiDsl.LlmTaskDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLlmtaskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cImplementsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cAnnotation_interfacesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cAnnotation_interfacesAnnotationInterfaceReferenceParserRuleCall_4_1_0 = (RuleCall)cAnnotation_interfacesAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cAnnotation_interfacesAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cAnnotation_interfacesAnnotationInterfaceReferenceParserRuleCall_4_2_1_0 = (RuleCall)cAnnotation_interfacesAssignment_4_2_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cAssignmentsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cAssignmentsLlmVariableAssignmentParserRuleCall_6_0 = (RuleCall)cAssignmentsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//// ---------------------------------------
		//// LLM Task definition
		//// ---------------------------------------
		////
		//// ---------------------------------------
		//LlmTaskDefinition:
		//    'llmtask' name=ID '(' ')' ('implements' annotation_interfaces+=AnnotationInterfaceReference (',' annotation_interfaces+=AnnotationInterfaceReference)* )? '{'
		//        (assignments+=LlmVariableAssignment)*
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'llmtask' name=ID '(' ')' ('implements' annotation_interfaces+=AnnotationInterfaceReference (',' annotation_interfaces+=AnnotationInterfaceReference)* )? '{'
		//    (assignments+=LlmVariableAssignment)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'llmtask'
		public Keyword getLlmtaskKeyword_0() { return cLlmtaskKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//('implements' annotation_interfaces+=AnnotationInterfaceReference (',' annotation_interfaces+=AnnotationInterfaceReference)* )?
		public Group getGroup_4() { return cGroup_4; }
		
		//'implements'
		public Keyword getImplementsKeyword_4_0() { return cImplementsKeyword_4_0; }
		
		//annotation_interfaces+=AnnotationInterfaceReference
		public Assignment getAnnotation_interfacesAssignment_4_1() { return cAnnotation_interfacesAssignment_4_1; }
		
		//AnnotationInterfaceReference
		public RuleCall getAnnotation_interfacesAnnotationInterfaceReferenceParserRuleCall_4_1_0() { return cAnnotation_interfacesAnnotationInterfaceReferenceParserRuleCall_4_1_0; }
		
		//(',' annotation_interfaces+=AnnotationInterfaceReference)*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//','
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }
		
		//annotation_interfaces+=AnnotationInterfaceReference
		public Assignment getAnnotation_interfacesAssignment_4_2_1() { return cAnnotation_interfacesAssignment_4_2_1; }
		
		//AnnotationInterfaceReference
		public RuleCall getAnnotation_interfacesAnnotationInterfaceReferenceParserRuleCall_4_2_1_0() { return cAnnotation_interfacesAnnotationInterfaceReferenceParserRuleCall_4_2_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//(assignments+=LlmVariableAssignment)*
		public Assignment getAssignmentsAssignment_6() { return cAssignmentsAssignment_6; }
		
		//LlmVariableAssignment
		public RuleCall getAssignmentsLlmVariableAssignmentParserRuleCall_6_0() { return cAssignmentsLlmVariableAssignmentParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class AnnotationInterfaceReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.mindscan.ai.aidsl.AiDsl.AnnotationInterfaceReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cNameVMNodeDefinitionCrossReference_1_0 = (CrossReference)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameVMNodeDefinitionIDTerminalRuleCall_1_0_1 = (RuleCall)cNameVMNodeDefinitionCrossReference_1_0.eContents().get(1);
		
		//// the hidden () will forbid a whitespace between the @ and the referenced definition
		//AnnotationInterfaceReference hidden ():
		//    '@'name=[VMNodeDefinition]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'@'name=[VMNodeDefinition]
		public Group getGroup() { return cGroup; }
		
		//'@'
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }
		
		//name=[VMNodeDefinition]
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//[VMNodeDefinition]
		public CrossReference getNameVMNodeDefinitionCrossReference_1_0() { return cNameVMNodeDefinitionCrossReference_1_0; }
		
		//ID
		public RuleCall getNameVMNodeDefinitionIDTerminalRuleCall_1_0_1() { return cNameVMNodeDefinitionIDTerminalRuleCall_1_0_1; }
	}
	public class LlmVariableAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.mindscan.ai.aidsl.AiDsl.LlmVariableAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariablenameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVariablenameIDTerminalRuleCall_0_0 = (RuleCall)cVariablenameAssignment_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTemplateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTemplateSTRINGTerminalRuleCall_2_0 = (RuleCall)cTemplateAssignment_2.eContents().get(0);
		
		//LlmVariableAssignment:
		//    variablename=ID ':=' template=STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//variablename=ID ':=' template=STRING
		public Group getGroup() { return cGroup; }
		
		//variablename=ID
		public Assignment getVariablenameAssignment_0() { return cVariablenameAssignment_0; }
		
		//ID
		public RuleCall getVariablenameIDTerminalRuleCall_0_0() { return cVariablenameIDTerminalRuleCall_0_0; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_1() { return cColonEqualsSignKeyword_1; }
		
		//template=STRING
		public Assignment getTemplateAssignment_2() { return cTemplateAssignment_2; }
		
		//STRING
		public RuleCall getTemplateSTRINGTerminalRuleCall_2_0() { return cTemplateSTRINGTerminalRuleCall_2_0; }
	}
	public class WorkflowDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.mindscan.ai.aidsl.AiDsl.WorkflowDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWorkflowKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInputAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cInputWorkflowInputDefinitionCrossReference_3_0 = (CrossReference)cInputAssignment_3.eContents().get(0);
		private final RuleCall cInputWorkflowInputDefinitionIDTerminalRuleCall_3_0_1 = (RuleCall)cInputWorkflowInputDefinitionCrossReference_3_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cStatementsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cStatementsWorkflowDefinitionApplyLLMTaskStatementParserRuleCall_6_0 = (RuleCall)cStatementsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//// ---------------------------------------
		//// workflows
		//// ---------------------------------------
		//WorkflowDefinition:
		//    'workflow' name=ID '(' input=[WorkflowInputDefinition] ')' '{'
		//        (statements+=WorkflowDefinitionApplyLLMTaskStatement)*
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'workflow' name=ID '(' input=[WorkflowInputDefinition] ')' '{'
		//    (statements+=WorkflowDefinitionApplyLLMTaskStatement)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'workflow'
		public Keyword getWorkflowKeyword_0() { return cWorkflowKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//input=[WorkflowInputDefinition]
		public Assignment getInputAssignment_3() { return cInputAssignment_3; }
		
		//[WorkflowInputDefinition]
		public CrossReference getInputWorkflowInputDefinitionCrossReference_3_0() { return cInputWorkflowInputDefinitionCrossReference_3_0; }
		
		//ID
		public RuleCall getInputWorkflowInputDefinitionIDTerminalRuleCall_3_0_1() { return cInputWorkflowInputDefinitionIDTerminalRuleCall_3_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//(statements+=WorkflowDefinitionApplyLLMTaskStatement)*
		public Assignment getStatementsAssignment_6() { return cStatementsAssignment_6; }
		
		//WorkflowDefinitionApplyLLMTaskStatement
		public RuleCall getStatementsWorkflowDefinitionApplyLLMTaskStatementParserRuleCall_6_0() { return cStatementsWorkflowDefinitionApplyLLMTaskStatementParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class WorkflowDefinitionApplyLLMTaskStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.mindscan.ai.aidsl.AiDsl.WorkflowDefinitionApplyLLMTaskStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLlmtaskAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cLlmtaskLlmTaskDefinitionCrossReference_0_0 = (CrossReference)cLlmtaskAssignment_0.eContents().get(0);
		private final RuleCall cLlmtaskLlmTaskDefinitionIDTerminalRuleCall_0_0_1 = (RuleCall)cLlmtaskLlmTaskDefinitionCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignGreaterThanSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cNoderesultassigmentsAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cNoderesultassigmentsWorkflowDefinitionApplyLLMNodeResultAssignmentParserRuleCall_3_2_0 = (RuleCall)cNoderesultassigmentsAssignment_3_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//WorkflowDefinitionApplyLLMTaskStatement:
		//    llmtask=[LlmTaskDefinition] '(' ')'
		//    ( '=>'
		//        '{'
		//            (noderesultassigments+=WorkflowDefinitionApplyLLMNodeResultAssignment)*
		//        '}'
		//    )?
		//    ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//llmtask=[LlmTaskDefinition] '(' ')'
		//( '=>'
		//    '{'
		//        (noderesultassigments+=WorkflowDefinitionApplyLLMNodeResultAssignment)*
		//    '}'
		//)?
		//';'
		public Group getGroup() { return cGroup; }
		
		//llmtask=[LlmTaskDefinition]
		public Assignment getLlmtaskAssignment_0() { return cLlmtaskAssignment_0; }
		
		//[LlmTaskDefinition]
		public CrossReference getLlmtaskLlmTaskDefinitionCrossReference_0_0() { return cLlmtaskLlmTaskDefinitionCrossReference_0_0; }
		
		//ID
		public RuleCall getLlmtaskLlmTaskDefinitionIDTerminalRuleCall_0_0_1() { return cLlmtaskLlmTaskDefinitionIDTerminalRuleCall_0_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
		
		//( '=>'
		//    '{'
		//        (noderesultassigments+=WorkflowDefinitionApplyLLMNodeResultAssignment)*
		//    '}'
		//)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_3_0() { return cEqualsSignGreaterThanSignKeyword_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_1() { return cLeftCurlyBracketKeyword_3_1; }
		
		//(noderesultassigments+=WorkflowDefinitionApplyLLMNodeResultAssignment)*
		public Assignment getNoderesultassigmentsAssignment_3_2() { return cNoderesultassigmentsAssignment_3_2; }
		
		//WorkflowDefinitionApplyLLMNodeResultAssignment
		public RuleCall getNoderesultassigmentsWorkflowDefinitionApplyLLMNodeResultAssignmentParserRuleCall_3_2_0() { return cNoderesultassigmentsWorkflowDefinitionApplyLLMNodeResultAssignmentParserRuleCall_3_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_3() { return cRightCurlyBracketKeyword_3_3; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class WorkflowDefinitionApplyLLMNodeResultAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.mindscan.ai.aidsl.AiDsl.WorkflowDefinitionApplyLLMNodeResultAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEnvironmentresultnameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEnvironmentresultnameQualifiedNameParserRuleCall_0_0 = (RuleCall)cEnvironmentresultnameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNoderesultnameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNoderesultnameQualifiedNameParserRuleCall_2_0 = (RuleCall)cNoderesultnameAssignment_2.eContents().get(0);
		
		//WorkflowDefinitionApplyLLMNodeResultAssignment:
		//    // TODO: this should be a reference and the applicable parserrule is Qualified name
		//    environmentresultname=QualifiedName ':' noderesultname=QualifiedName;
		@Override public ParserRule getRule() { return rule; }
		
		//// TODO: this should be a reference and the applicable parserrule is Qualified name
		//environmentresultname=QualifiedName ':' noderesultname=QualifiedName
		public Group getGroup() { return cGroup; }
		
		//// TODO: this should be a reference and the applicable parserrule is Qualified name
		//environmentresultname=QualifiedName
		public Assignment getEnvironmentresultnameAssignment_0() { return cEnvironmentresultnameAssignment_0; }
		
		//QualifiedName
		public RuleCall getEnvironmentresultnameQualifiedNameParserRuleCall_0_0() { return cEnvironmentresultnameQualifiedNameParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//noderesultname=QualifiedName
		public Assignment getNoderesultnameAssignment_2() { return cNoderesultnameAssignment_2; }
		
		//QualifiedName
		public RuleCall getNoderesultnameQualifiedNameParserRuleCall_2_0() { return cNoderesultnameQualifiedNameParserRuleCall_2_0; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.mindscan.ai.aidsl.AiDsl.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//// ---------------------------------------
		//// Common stuff
		//// ---------------------------------------
		//QualifiedName:
		//    ID ('.'ID)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.'ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.'ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.mindscan.ai.aidsl.AiDsl.QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//QualifiedNameWithWildcard:
		//    QualifiedName '.*'?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//QualifiedName '.*'?
		public Group getGroup() { return cGroup; }
		
		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }
		
		//'.*'?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}
	public class ELEMENTTYPEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.mindscan.ai.aidsl.AiDsl.ELEMENTTYPE");
		private final RuleCall cBASICTYPEParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ELEMENTTYPE:
		//    BASICTYPE
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//BASICTYPE
		public RuleCall getBASICTYPEParserRuleCall() { return cBASICTYPEParserRuleCall; }
	}
	public class BASICTYPEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.mindscan.ai.aidsl.AiDsl.BASICTYPE");
		private final Assignment cTypenameAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cTypenameAlternatives_0 = (Alternatives)cTypenameAssignment.eContents().get(0);
		private final Keyword cTypenameStringKeyword_0_0 = (Keyword)cTypenameAlternatives_0.eContents().get(0);
		private final Keyword cTypenameIntKeyword_0_1 = (Keyword)cTypenameAlternatives_0.eContents().get(1);
		private final Keyword cTypenameBooleanKeyword_0_2 = (Keyword)cTypenameAlternatives_0.eContents().get(2);
		private final Keyword cTypenameJsonstringKeyword_0_3 = (Keyword)cTypenameAlternatives_0.eContents().get(3);
		
		//BASICTYPE:
		//    typename=('string'|'int'|'boolean'|'jsonstring')
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//typename=('string'|'int'|'boolean'|'jsonstring')
		public Assignment getTypenameAssignment() { return cTypenameAssignment; }
		
		//('string'|'int'|'boolean'|'jsonstring')
		public Alternatives getTypenameAlternatives_0() { return cTypenameAlternatives_0; }
		
		//'string'
		public Keyword getTypenameStringKeyword_0_0() { return cTypenameStringKeyword_0_0; }
		
		//'int'
		public Keyword getTypenameIntKeyword_0_1() { return cTypenameIntKeyword_0_1; }
		
		//'boolean'
		public Keyword getTypenameBooleanKeyword_0_2() { return cTypenameBooleanKeyword_0_2; }
		
		//'jsonstring'
		public Keyword getTypenameJsonstringKeyword_0_3() { return cTypenameJsonstringKeyword_0_3; }
	}
	
	
	private final ModelElements pModel;
	private final PackageDeclarationElements pPackageDeclaration;
	private final ImportDeclarationElements pImportDeclaration;
	private final WorkflowInputDefinitionElements pWorkflowInputDefinition;
	private final WorkflowUIElementElements pWorkflowUIElement;
	private final WorkflowUIElementMapElements pWorkflowUIElementMap;
	private final WorkflowDataDictionaryDefinitionElements pWorkflowDataDictionaryDefinition;
	private final WorkflowDataDictionaryElementElements pWorkflowDataDictionaryElement;
	private final DatadictionaryKeyValuePairElements pDatadictionaryKeyValuePair;
	private final DataDictionaryBooleanValueElements pDataDictionaryBooleanValue;
	private final DataDictionaryStringValueElements pDataDictionaryStringValue;
	private final DataDictionaryNullValueElements pDataDictionaryNullValue;
	private final VMNodeDefinitionElements pVMNodeDefinition;
	private final VMNodeEleemntsElements pVMNodeEleemnts;
	private final VMNodeOpCodeElementElements pVMNodeOpCodeElement;
	private final VMNodeOutElementsElements pVMNodeOutElements;
	private final VMNodeInElementsElements pVMNodeInElements;
	private final VMNodeFieldElementsElements pVMNodeFieldElements;
	private final VMNodeOutElementElements pVMNodeOutElement;
	private final VMNodeInElementElements pVMNodeInElement;
	private final VMFieldElementElements pVMFieldElement;
	private final VMOverrideFieldElementElements pVMOverrideFieldElement;
	private final LlmTaskDefinitionElements pLlmTaskDefinition;
	private final AnnotationInterfaceReferenceElements pAnnotationInterfaceReference;
	private final LlmVariableAssignmentElements pLlmVariableAssignment;
	private final WorkflowDefinitionElements pWorkflowDefinition;
	private final WorkflowDefinitionApplyLLMTaskStatementElements pWorkflowDefinitionApplyLLMTaskStatement;
	private final WorkflowDefinitionApplyLLMNodeResultAssignmentElements pWorkflowDefinitionApplyLLMNodeResultAssignment;
	private final QualifiedNameElements pQualifiedName;
	private final QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	private final ELEMENTTYPEElements pELEMENTTYPE;
	private final BASICTYPEElements pBASICTYPE;
	private final TerminalRule tID;
	private final TerminalRule tINT;
	private final TerminalRule tSTRING;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tWS;
	private final TerminalRule tANY_OTHER;
	
	private final Grammar grammar;

	@Inject
	public AiDslGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pModel = new ModelElements();
		this.pPackageDeclaration = new PackageDeclarationElements();
		this.pImportDeclaration = new ImportDeclarationElements();
		this.pWorkflowInputDefinition = new WorkflowInputDefinitionElements();
		this.pWorkflowUIElement = new WorkflowUIElementElements();
		this.pWorkflowUIElementMap = new WorkflowUIElementMapElements();
		this.pWorkflowDataDictionaryDefinition = new WorkflowDataDictionaryDefinitionElements();
		this.pWorkflowDataDictionaryElement = new WorkflowDataDictionaryElementElements();
		this.pDatadictionaryKeyValuePair = new DatadictionaryKeyValuePairElements();
		this.pDataDictionaryBooleanValue = new DataDictionaryBooleanValueElements();
		this.pDataDictionaryStringValue = new DataDictionaryStringValueElements();
		this.pDataDictionaryNullValue = new DataDictionaryNullValueElements();
		this.pVMNodeDefinition = new VMNodeDefinitionElements();
		this.pVMNodeEleemnts = new VMNodeEleemntsElements();
		this.pVMNodeOpCodeElement = new VMNodeOpCodeElementElements();
		this.pVMNodeOutElements = new VMNodeOutElementsElements();
		this.pVMNodeInElements = new VMNodeInElementsElements();
		this.pVMNodeFieldElements = new VMNodeFieldElementsElements();
		this.pVMNodeOutElement = new VMNodeOutElementElements();
		this.pVMNodeInElement = new VMNodeInElementElements();
		this.pVMFieldElement = new VMFieldElementElements();
		this.pVMOverrideFieldElement = new VMOverrideFieldElementElements();
		this.pLlmTaskDefinition = new LlmTaskDefinitionElements();
		this.pAnnotationInterfaceReference = new AnnotationInterfaceReferenceElements();
		this.pLlmVariableAssignment = new LlmVariableAssignmentElements();
		this.pWorkflowDefinition = new WorkflowDefinitionElements();
		this.pWorkflowDefinitionApplyLLMTaskStatement = new WorkflowDefinitionApplyLLMTaskStatementElements();
		this.pWorkflowDefinitionApplyLLMNodeResultAssignment = new WorkflowDefinitionApplyLLMNodeResultAssignmentElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements();
		this.pELEMENTTYPE = new ELEMENTTYPEElements();
		this.pBASICTYPE = new BASICTYPEElements();
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.mindscan.ai.aidsl.AiDsl.ID");
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.mindscan.ai.aidsl.AiDsl.INT");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.mindscan.ai.aidsl.AiDsl.STRING");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.mindscan.ai.aidsl.AiDsl.ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.mindscan.ai.aidsl.AiDsl.SL_COMMENT");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.mindscan.ai.aidsl.AiDsl.WS");
		this.tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.mindscan.ai.aidsl.AiDsl.ANY_OTHER");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.mindscan.ai.aidsl.AiDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Model:
	//    (package_declaration=PackageDeclaration)?
	//    (import_declarations+=ImportDeclaration)*
	//    definitions += (
	//        WorkflowDefinition|
	//        WorkflowDataDictionaryDefinition|
	//        WorkflowInputDefinition|
	//        LlmTaskDefinition|
	//        VMNodeDefinition
	//    )*
	//;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//PackageDeclaration:
	//    'package' name=QualifiedName
	//;
	public PackageDeclarationElements getPackageDeclarationAccess() {
		return pPackageDeclaration;
	}
	
	public ParserRule getPackageDeclarationRule() {
		return getPackageDeclarationAccess().getRule();
	}
	
	//ImportDeclaration:
	//    'import' importedNamespace=QualifiedNameWithWildcard
	//;
	public ImportDeclarationElements getImportDeclarationAccess() {
		return pImportDeclaration;
	}
	
	public ParserRule getImportDeclarationRule() {
		return getImportDeclarationAccess().getRule();
	}
	
	//// should we reference the workflow or the oher way around?
	//WorkflowInputDefinition:
	//    {WorkflowInputDefinition} 'datainput' name=ID '{'
	//        (uiElements+=WorkflowUIElement)*
	//    '}'
	//;
	public WorkflowInputDefinitionElements getWorkflowInputDefinitionAccess() {
		return pWorkflowInputDefinition;
	}
	
	public ParserRule getWorkflowInputDefinitionRule() {
		return getWorkflowInputDefinitionAccess().getRule();
	}
	
	//WorkflowUIElement:
	//    name=QualifiedName ':' datatype=ELEMENTTYPE (uielement=WorkflowUIElementMap)?
	//;
	public WorkflowUIElementElements getWorkflowUIElementAccess() {
		return pWorkflowUIElement;
	}
	
	public ParserRule getWorkflowUIElementRule() {
		return getWorkflowUIElementAccess().getRule();
	}
	
	//WorkflowUIElementMap:
	//    'ui' '{'
	//        'label' label=STRING
	//        'uitype' uitype=STRING
	//    '}'
	//;
	public WorkflowUIElementMapElements getWorkflowUIElementMapAccess() {
		return pWorkflowUIElementMap;
	}
	
	public ParserRule getWorkflowUIElementMapRule() {
		return getWorkflowUIElementMapAccess().getRule();
	}
	
	//// ---------------------------------------
	//// Workflow Data Defitinion /
	//// Workflow Data Dictionary
	//// ---------------------------------------
	////
	//// ---------------------------------------
	//WorkflowDataDictionaryDefinition:
	//    {WorkflowDataDictionaryDefinition} 'datadictionary' '{'
	//        (dataDictionaryElements+=WorkflowDataDictionaryElement)*
	//    '}'
	//;
	public WorkflowDataDictionaryDefinitionElements getWorkflowDataDictionaryDefinitionAccess() {
		return pWorkflowDataDictionaryDefinition;
	}
	
	public ParserRule getWorkflowDataDictionaryDefinitionRule() {
		return getWorkflowDataDictionaryDefinitionAccess().getRule();
	}
	
	//WorkflowDataDictionaryElement:
	//    "data" name=ID ('extends' extends=[WorkflowDataDictionaryElement])?
	//        // can be a map or a list or a direct value
	//        '{'
	//            (keyValuePairs+=DatadictionaryKeyValuePair)*
	//        '}'
	//;
	public WorkflowDataDictionaryElementElements getWorkflowDataDictionaryElementAccess() {
		return pWorkflowDataDictionaryElement;
	}
	
	public ParserRule getWorkflowDataDictionaryElementRule() {
		return getWorkflowDataDictionaryElementAccess().getRule();
	}
	
	//// TODO: we want alsoo integers, maps, lists
	//DatadictionaryKeyValuePair:
	//    // basically key value stuff.
	//    key=ID ':' value=(
	//        DataDictionaryBooleanValue|
	//        DataDictionaryStringValue|
	//        DataDictionaryNullValue
	//    )
	//;
	public DatadictionaryKeyValuePairElements getDatadictionaryKeyValuePairAccess() {
		return pDatadictionaryKeyValuePair;
	}
	
	public ParserRule getDatadictionaryKeyValuePairRule() {
		return getDatadictionaryKeyValuePairAccess().getRule();
	}
	
	//DataDictionaryBooleanValue:
	//    'true'|'false'
	//;
	public DataDictionaryBooleanValueElements getDataDictionaryBooleanValueAccess() {
		return pDataDictionaryBooleanValue;
	}
	
	public ParserRule getDataDictionaryBooleanValueRule() {
		return getDataDictionaryBooleanValueAccess().getRule();
	}
	
	//DataDictionaryStringValue:
	//    STRING
	//;
	public DataDictionaryStringValueElements getDataDictionaryStringValueAccess() {
		return pDataDictionaryStringValue;
	}
	
	public ParserRule getDataDictionaryStringValueRule() {
		return getDataDictionaryStringValueAccess().getRule();
	}
	
	//DataDictionaryNullValue:
	//    'null'
	//;
	public DataDictionaryNullValueElements getDataDictionaryNullValueAccess() {
		return pDataDictionaryNullValue;
	}
	
	public ParserRule getDataDictionaryNullValueRule() {
		return getDataDictionaryNullValueAccess().getRule();
	}
	
	//// ---------------------------------------
	//// VMNode stuff
	//// ---------------------------------------
	////
	//// ---------------------------------------
	//VMNodeDefinition:
	//    'vmnode' (nodetype=('super'|'overlay'))? name=ID '{'
	//        (elements+=VMNodeEleemnts)*
	//    '}'
	//;
	public VMNodeDefinitionElements getVMNodeDefinitionAccess() {
		return pVMNodeDefinition;
	}
	
	public ParserRule getVMNodeDefinitionRule() {
		return getVMNodeDefinitionAccess().getRule();
	}
	
	//VMNodeEleemnts:
	//    (
	//        VMNodeOpCodeElement|
	//        VMNodeOutElements|
	//        VMNodeInElements|
	//        VMNodeFieldElements
	//    )
	//;
	public VMNodeEleemntsElements getVMNodeEleemntsAccess() {
		return pVMNodeEleemnts;
	}
	
	public ParserRule getVMNodeEleemntsRule() {
		return getVMNodeEleemntsAccess().getRule();
	}
	
	//VMNodeOpCodeElement:
	//    'opcode' opcode=STRING
	//;
	public VMNodeOpCodeElementElements getVMNodeOpCodeElementAccess() {
		return pVMNodeOpCodeElement;
	}
	
	public ParserRule getVMNodeOpCodeElementRule() {
		return getVMNodeOpCodeElementAccess().getRule();
	}
	
	//VMNodeOutElements:
	//    {VMNodeOutElements} 'out' '{'
	//        (outElements+=VMNodeOutElement)*
	//    '}'
	//;
	public VMNodeOutElementsElements getVMNodeOutElementsAccess() {
		return pVMNodeOutElements;
	}
	
	public ParserRule getVMNodeOutElementsRule() {
		return getVMNodeOutElementsAccess().getRule();
	}
	
	//VMNodeInElements:
	//    {VMNodeInElements} 'in' '{'
	//        (inElements+=VMNodeInElement)*
	//    '}'
	//;
	public VMNodeInElementsElements getVMNodeInElementsAccess() {
		return pVMNodeInElements;
	}
	
	public ParserRule getVMNodeInElementsRule() {
		return getVMNodeInElementsAccess().getRule();
	}
	
	//VMNodeFieldElements:
	//    {VMNodeFieldElements} 'fields' '{'
	//        (fieldELements+=(VMFieldElement|VMOverrideFieldElement))*
	//    '}'
	//;
	public VMNodeFieldElementsElements getVMNodeFieldElementsAccess() {
		return pVMNodeFieldElements;
	}
	
	public ParserRule getVMNodeFieldElementsRule() {
		return getVMNodeFieldElementsAccess().getRule();
	}
	
	//VMNodeOutElement:
	//    name=QualifiedName 'as' type=ELEMENTTYPE (hasrequire?='require' inputreference=QualifiedName)?
	//;
	public VMNodeOutElementElements getVMNodeOutElementAccess() {
		return pVMNodeOutElement;
	}
	
	public ParserRule getVMNodeOutElementRule() {
		return getVMNodeOutElementAccess().getRule();
	}
	
	//VMNodeInElement:
	//    (policy=('require'|'optional'))? name=QualifiedName
	//;
	public VMNodeInElementElements getVMNodeInElementAccess() {
		return pVMNodeInElement;
	}
	
	public ParserRule getVMNodeInElementRule() {
		return getVMNodeInElementAccess().getRule();
	}
	
	//VMFieldElement:
	//    policy=('require'|'optional') type=ELEMENTTYPE name=ID ('default' defaultvalue=(STRING))?
	//;
	public VMFieldElementElements getVMFieldElementAccess() {
		return pVMFieldElement;
	}
	
	public ParserRule getVMFieldElementRule() {
		return getVMFieldElementAccess().getRule();
	}
	
	//VMOverrideFieldElement:
	//    policy=('override') type=ELEMENTTYPE name=ID ':=' defaultvalue=(STRING)
	//;
	public VMOverrideFieldElementElements getVMOverrideFieldElementAccess() {
		return pVMOverrideFieldElement;
	}
	
	public ParserRule getVMOverrideFieldElementRule() {
		return getVMOverrideFieldElementAccess().getRule();
	}
	
	//// ---------------------------------------
	//// LLM Task definition
	//// ---------------------------------------
	////
	//// ---------------------------------------
	//LlmTaskDefinition:
	//    'llmtask' name=ID '(' ')' ('implements' annotation_interfaces+=AnnotationInterfaceReference (',' annotation_interfaces+=AnnotationInterfaceReference)* )? '{'
	//        (assignments+=LlmVariableAssignment)*
	//    '}'
	//;
	public LlmTaskDefinitionElements getLlmTaskDefinitionAccess() {
		return pLlmTaskDefinition;
	}
	
	public ParserRule getLlmTaskDefinitionRule() {
		return getLlmTaskDefinitionAccess().getRule();
	}
	
	//// the hidden () will forbid a whitespace between the @ and the referenced definition
	//AnnotationInterfaceReference hidden ():
	//    '@'name=[VMNodeDefinition]
	//;
	public AnnotationInterfaceReferenceElements getAnnotationInterfaceReferenceAccess() {
		return pAnnotationInterfaceReference;
	}
	
	public ParserRule getAnnotationInterfaceReferenceRule() {
		return getAnnotationInterfaceReferenceAccess().getRule();
	}
	
	//LlmVariableAssignment:
	//    variablename=ID ':=' template=STRING
	//;
	public LlmVariableAssignmentElements getLlmVariableAssignmentAccess() {
		return pLlmVariableAssignment;
	}
	
	public ParserRule getLlmVariableAssignmentRule() {
		return getLlmVariableAssignmentAccess().getRule();
	}
	
	//// ---------------------------------------
	//// workflows
	//// ---------------------------------------
	//WorkflowDefinition:
	//    'workflow' name=ID '(' input=[WorkflowInputDefinition] ')' '{'
	//        (statements+=WorkflowDefinitionApplyLLMTaskStatement)*
	//    '}'
	//;
	public WorkflowDefinitionElements getWorkflowDefinitionAccess() {
		return pWorkflowDefinition;
	}
	
	public ParserRule getWorkflowDefinitionRule() {
		return getWorkflowDefinitionAccess().getRule();
	}
	
	//WorkflowDefinitionApplyLLMTaskStatement:
	//    llmtask=[LlmTaskDefinition] '(' ')'
	//    ( '=>'
	//        '{'
	//            (noderesultassigments+=WorkflowDefinitionApplyLLMNodeResultAssignment)*
	//        '}'
	//    )?
	//    ';'
	//;
	public WorkflowDefinitionApplyLLMTaskStatementElements getWorkflowDefinitionApplyLLMTaskStatementAccess() {
		return pWorkflowDefinitionApplyLLMTaskStatement;
	}
	
	public ParserRule getWorkflowDefinitionApplyLLMTaskStatementRule() {
		return getWorkflowDefinitionApplyLLMTaskStatementAccess().getRule();
	}
	
	//WorkflowDefinitionApplyLLMNodeResultAssignment:
	//    // TODO: this should be a reference and the applicable parserrule is Qualified name
	//    environmentresultname=QualifiedName ':' noderesultname=QualifiedName;
	public WorkflowDefinitionApplyLLMNodeResultAssignmentElements getWorkflowDefinitionApplyLLMNodeResultAssignmentAccess() {
		return pWorkflowDefinitionApplyLLMNodeResultAssignment;
	}
	
	public ParserRule getWorkflowDefinitionApplyLLMNodeResultAssignmentRule() {
		return getWorkflowDefinitionApplyLLMNodeResultAssignmentAccess().getRule();
	}
	
	//// ---------------------------------------
	//// Common stuff
	//// ---------------------------------------
	//QualifiedName:
	//    ID ('.'ID)*
	//;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//QualifiedNameWithWildcard:
	//    QualifiedName '.*'?
	//;
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return pQualifiedNameWithWildcard;
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}
	
	//ELEMENTTYPE:
	//    BASICTYPE
	//;
	public ELEMENTTYPEElements getELEMENTTYPEAccess() {
		return pELEMENTTYPE;
	}
	
	public ParserRule getELEMENTTYPERule() {
		return getELEMENTTYPEAccess().getRule();
	}
	
	//BASICTYPE:
	//    typename=('string'|'int'|'boolean'|'jsonstring')
	//;
	public BASICTYPEElements getBASICTYPEAccess() {
		return pBASICTYPE;
	}
	
	public ParserRule getBASICTYPERule() {
		return getBASICTYPEAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return tINT;
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'" |
	//            "'''"  -> "'''"
	//        ;
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return tWS;
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return tANY_OTHER;
	}
}
