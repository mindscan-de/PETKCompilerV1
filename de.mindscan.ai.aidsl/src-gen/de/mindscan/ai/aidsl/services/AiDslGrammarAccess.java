/*
 * generated by Xtext 2.27.0
 */
package de.mindscan.ai.aidsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class AiDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.mindscan.ai.aidsl.AiDsl.Model");
		private final Assignment cDefinitionsAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cDefinitionsAlternatives_0 = (Alternatives)cDefinitionsAssignment.eContents().get(0);
		private final RuleCall cDefinitionsWorkflowDefinitionParserRuleCall_0_0 = (RuleCall)cDefinitionsAlternatives_0.eContents().get(0);
		private final RuleCall cDefinitionsLlmTaskDefinitionParserRuleCall_0_1 = (RuleCall)cDefinitionsAlternatives_0.eContents().get(1);
		
		//Model:
		//    definitions += (WorkflowDefinition|LlmTaskDefinition)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//definitions += (WorkflowDefinition|LlmTaskDefinition)*
		public Assignment getDefinitionsAssignment() { return cDefinitionsAssignment; }
		
		//(WorkflowDefinition|LlmTaskDefinition)
		public Alternatives getDefinitionsAlternatives_0() { return cDefinitionsAlternatives_0; }
		
		//WorkflowDefinition
		public RuleCall getDefinitionsWorkflowDefinitionParserRuleCall_0_0() { return cDefinitionsWorkflowDefinitionParserRuleCall_0_0; }
		
		//LlmTaskDefinition
		public RuleCall getDefinitionsLlmTaskDefinitionParserRuleCall_0_1() { return cDefinitionsLlmTaskDefinitionParserRuleCall_0_1; }
	}
	public class WorkflowDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.mindscan.ai.aidsl.AiDsl.WorkflowDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWorkflowKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//WorkflowDefinition:
		//    'workflow' name=ID '(' ')' '{'
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'workflow' name=ID '(' ')' '{'
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'workflow'
		public Keyword getWorkflowKeyword_0() { return cWorkflowKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class LlmTaskDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.mindscan.ai.aidsl.AiDsl.LlmTaskDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLlmtaskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cAssignmentAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAssignmentLlmVariableAssignmentParserRuleCall_5_0 = (RuleCall)cAssignmentAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//LlmTaskDefinition:
		//    'llmtask' name=ID '(' ')' '{'
		//        assignment+=LlmVariableAssignment*
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'llmtask' name=ID '(' ')' '{'
		//    assignment+=LlmVariableAssignment*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'llmtask'
		public Keyword getLlmtaskKeyword_0() { return cLlmtaskKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//assignment+=LlmVariableAssignment*
		public Assignment getAssignmentAssignment_5() { return cAssignmentAssignment_5; }
		
		//LlmVariableAssignment
		public RuleCall getAssignmentLlmVariableAssignmentParserRuleCall_5_0() { return cAssignmentLlmVariableAssignmentParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class LlmVariableAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.mindscan.ai.aidsl.AiDsl.LlmVariableAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariablenameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVariablenameIDTerminalRuleCall_0_0 = (RuleCall)cVariablenameAssignment_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTemplateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTemplateML_TEMPLATE_STRINGTerminalRuleCall_2_0 = (RuleCall)cTemplateAssignment_2.eContents().get(0);
		
		//LlmVariableAssignment:
		//    variablename=ID ':=' template=ML_TEMPLATE_STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//variablename=ID ':=' template=ML_TEMPLATE_STRING
		public Group getGroup() { return cGroup; }
		
		//variablename=ID
		public Assignment getVariablenameAssignment_0() { return cVariablenameAssignment_0; }
		
		//ID
		public RuleCall getVariablenameIDTerminalRuleCall_0_0() { return cVariablenameIDTerminalRuleCall_0_0; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_1() { return cColonEqualsSignKeyword_1; }
		
		//template=ML_TEMPLATE_STRING
		public Assignment getTemplateAssignment_2() { return cTemplateAssignment_2; }
		
		//ML_TEMPLATE_STRING
		public RuleCall getTemplateML_TEMPLATE_STRINGTerminalRuleCall_2_0() { return cTemplateML_TEMPLATE_STRINGTerminalRuleCall_2_0; }
	}
	
	
	private final ModelElements pModel;
	private final WorkflowDefinitionElements pWorkflowDefinition;
	private final LlmTaskDefinitionElements pLlmTaskDefinition;
	private final LlmVariableAssignmentElements pLlmVariableAssignment;
	private final TerminalRule tML_TEMPLATE_STRING;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public AiDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pWorkflowDefinition = new WorkflowDefinitionElements();
		this.pLlmTaskDefinition = new LlmTaskDefinitionElements();
		this.pLlmVariableAssignment = new LlmVariableAssignmentElements();
		this.tML_TEMPLATE_STRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.mindscan.ai.aidsl.AiDsl.ML_TEMPLATE_STRING");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.mindscan.ai.aidsl.AiDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//    definitions += (WorkflowDefinition|LlmTaskDefinition)*
	//;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//WorkflowDefinition:
	//    'workflow' name=ID '(' ')' '{'
	//    '}'
	//;
	public WorkflowDefinitionElements getWorkflowDefinitionAccess() {
		return pWorkflowDefinition;
	}
	
	public ParserRule getWorkflowDefinitionRule() {
		return getWorkflowDefinitionAccess().getRule();
	}
	
	//LlmTaskDefinition:
	//    'llmtask' name=ID '(' ')' '{'
	//        assignment+=LlmVariableAssignment*
	//    '}'
	//;
	public LlmTaskDefinitionElements getLlmTaskDefinitionAccess() {
		return pLlmTaskDefinition;
	}
	
	public ParserRule getLlmTaskDefinitionRule() {
		return getLlmTaskDefinitionAccess().getRule();
	}
	
	//LlmVariableAssignment:
	//    variablename=ID ':=' template=ML_TEMPLATE_STRING
	//;
	public LlmVariableAssignmentElements getLlmVariableAssignmentAccess() {
		return pLlmVariableAssignment;
	}
	
	public ParserRule getLlmVariableAssignmentRule() {
		return getLlmVariableAssignmentAccess().getRule();
	}
	
	//terminal ML_TEMPLATE_STRING: "'''"  -> "'''";
	public TerminalRule getML_TEMPLATE_STRINGRule() {
		return tML_TEMPLATE_STRING;
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
