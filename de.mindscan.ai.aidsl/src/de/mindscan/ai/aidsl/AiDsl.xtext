grammar de.mindscan.ai.aidsl.AiDsl hidden(WS, ML_COMMENT, SL_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate aiDsl "http://www.mindscan.de/ai/aidsl/AiDsl"

Model:
	(package_declaration=PackageDeclaration)?
	
	(import_declarations+=ImportDeclaration)*
	
	definitions += (
		WorkflowDefinition|
		LlmTaskDefinition|
		VMNodeDefinition
	)*
;

PackageDeclaration:
	'package' name=QualifiedName
;

ImportDeclaration:
	'import' importedNamespace=QualifiedNameWithWildcard
;


// ---------------------------------------
// VMNode stuff
// ---------------------------------------
//  
// ---------------------------------------

VMNodeDefinition:
	'vmnode' (nodetype=('super'|'overlay'))? name=ID '{'
		(elements+=VMNodeEleemnts)*
	'}'
;

VMNodeEleemnts:
	(VMNodeOpCodeElement|VMNodeOutElements|VMNodeInElements|VMNodeElement|VMOverrideElement)
;


VMNodeOpCodeElement:
	'opcode' code=STRING
;

VMNodeOutElements:
	{VMNodeOutElements} 'out' '{'
		(outElements+=VMNodeOutElement)* 
	'}'
;

VMNodeOutElement:
	name=QualifiedName 'as' type=ID (hasrequire?='require' inputreference=QualifiedName)?
;

VMNodeInElements:
	{VMNodeInElements} 'in' '{'
		(inElements+=VMNodeInElement)*
	'}'
;

VMNodeInElement:
	(policy=('require'|'optional'))? name=QualifiedName
;

VMNodeElement:
	policy=('require'|'optional') type=ID name=ID ('default' defaultvalue=(STRING))?
;

VMOverrideElement:
	policy=('override') type=ID name=ID ':=' defaultvalue=(STRING)
;

// ---------------------------------------
// LLM Task definition
// ---------------------------------------
// 
// ---------------------------------------

LlmTaskDefinition:
	'llmtask' name=ID '(' ')' ('implements' annotation_interfaces+=AnnotationInterfaceReference (',' annotation_interfaces+=AnnotationInterfaceReference)* )? '{'
		(assignment+=LlmVariableAssignment)*
	'}' 
;

// the hidden () will forbid a whitespace between the @ and the referenced definition
AnnotationInterfaceReference hidden ():
	'@'name=[VMNodeDefinition]
;

LlmVariableAssignment:
	variablename=ID ':=' template=STRING
;



// ---------------------------------------
// workflows
// ---------------------------------------

WorkflowDefinition:
	'workflow' name=ID '(' ')' '{'
	'}'
;


// ---------------------------------------
// Common stuff
// ---------------------------------------


QualifiedName:
	ID ('.'ID)*
;
QualifiedNameWithWildcard:
	QualifiedName '.*'?
;



terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
terminal INT returns ecore::EInt: ('0'..'9')+;
terminal STRING:
			'"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
			"'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'" |
			"'''"  -> "'''"
		;
terminal ML_COMMENT : '/*' -> '*/';
terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;

terminal WS         : (' '|'\t'|'\r'|'\n')+;

terminal ANY_OTHER: .;
